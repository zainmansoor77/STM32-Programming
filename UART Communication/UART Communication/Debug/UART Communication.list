
UART Communication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bd0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003d58  08003d58  00013d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d90  08003d90  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08003d90  08003d90  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d90  08003d90  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d90  08003d90  00013d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d94  08003d94  00013d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08003d98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  2000002c  08003dc4  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  08003dc4  00020500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001355f  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002371  00000000  00000000  000335bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e60  00000000  00000000  00035930  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d78  00000000  00000000  00036790  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d7e0  00000000  00000000  00037508  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dd0c  00000000  00000000  00054ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b00dd  00000000  00000000  000629f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00112ad1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c3c  00000000  00000000  00112b4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000002c 	.word	0x2000002c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003d40 	.word	0x08003d40

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000030 	.word	0x20000030
 80001c4:	08003d40 	.word	0x08003d40

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fc0c 	bl	80009e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f81c 	bl	800020c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f980 	bl	80004d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001d8:	f000 f87e 	bl	80002d8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80001dc:	f000 f8bc 	bl	8000358 <MX_SPI1_Init>
  MX_UART5_Init();
 80001e0:	f000 f8f8 	bl	80003d4 <MX_UART5_Init>
  MX_USART2_UART_Init();
 80001e4:	f000 f926 	bl	8000434 <MX_USART2_UART_Init>
  MX_USB_PCD_Init();
 80001e8:	f000 f954 	bl	8000494 <MX_USB_PCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
HAL_UART_Transmit(&huart2, tx_buffer, sizeof(tx_buffer), 10);
 80001ec:	230a      	movs	r3, #10
 80001ee:	221e      	movs	r2, #30
 80001f0:	4904      	ldr	r1, [pc, #16]	; (8000204 <main+0x3c>)
 80001f2:	4805      	ldr	r0, [pc, #20]	; (8000208 <main+0x40>)
 80001f4:	f002 fd79 	bl	8002cea <HAL_UART_Transmit>
HAL_Delay(1000);
 80001f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001fc:	f000 fc5a 	bl	8000ab4 <HAL_Delay>
HAL_UART_Transmit(&huart2, tx_buffer, sizeof(tx_buffer), 10);
 8000200:	e7f4      	b.n	80001ec <main+0x24>
 8000202:	bf00      	nop
 8000204:	20000000 	.word	0x20000000
 8000208:	20000188 	.word	0x20000188

0800020c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b09e      	sub	sp, #120	; 0x78
 8000210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000212:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000216:	2228      	movs	r2, #40	; 0x28
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f003 fd88 	bl	8003d30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000220:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000224:	2200      	movs	r2, #0
 8000226:	601a      	str	r2, [r3, #0]
 8000228:	605a      	str	r2, [r3, #4]
 800022a:	609a      	str	r2, [r3, #8]
 800022c:	60da      	str	r2, [r3, #12]
 800022e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000230:	463b      	mov	r3, r7
 8000232:	223c      	movs	r2, #60	; 0x3c
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f003 fd7a 	bl	8003d30 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800023c:	2303      	movs	r3, #3
 800023e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000240:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000244:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024a:	2301      	movs	r3, #1
 800024c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024e:	2310      	movs	r3, #16
 8000250:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000252:	2302      	movs	r3, #2
 8000254:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000256:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800025a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800025c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000260:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000262:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000266:	4618      	mov	r0, r3
 8000268:	f001 f958 	bl	800151c <HAL_RCC_OscConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000272:	f000 f9bb 	bl	80005ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000276:	230f      	movs	r3, #15
 8000278:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800027a:	2302      	movs	r3, #2
 800027c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000286:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800028c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000290:	2101      	movs	r1, #1
 8000292:	4618      	mov	r0, r3
 8000294:	f002 f84a 	bl	800232c <HAL_RCC_ClockConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800029e:	f000 f9a5 	bl	80005ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 80002a2:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <SystemClock_Config+0xc8>)
 80002a4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002ae:	2300      	movs	r3, #0
 80002b0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80002b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80002b6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002b8:	463b      	mov	r3, r7
 80002ba:	4618      	mov	r0, r3
 80002bc:	f002 fa6c 	bl	8002798 <HAL_RCCEx_PeriphCLKConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80002c6:	f000 f991 	bl	80005ec <Error_Handler>
  }
}
 80002ca:	bf00      	nop
 80002cc:	3778      	adds	r7, #120	; 0x78
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	00020032 	.word	0x00020032

080002d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002dc:	4b1b      	ldr	r3, [pc, #108]	; (800034c <MX_I2C1_Init+0x74>)
 80002de:	4a1c      	ldr	r2, [pc, #112]	; (8000350 <MX_I2C1_Init+0x78>)
 80002e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80002e2:	4b1a      	ldr	r3, [pc, #104]	; (800034c <MX_I2C1_Init+0x74>)
 80002e4:	4a1b      	ldr	r2, [pc, #108]	; (8000354 <MX_I2C1_Init+0x7c>)
 80002e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002e8:	4b18      	ldr	r3, [pc, #96]	; (800034c <MX_I2C1_Init+0x74>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002ee:	4b17      	ldr	r3, [pc, #92]	; (800034c <MX_I2C1_Init+0x74>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002f4:	4b15      	ldr	r3, [pc, #84]	; (800034c <MX_I2C1_Init+0x74>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002fa:	4b14      	ldr	r3, [pc, #80]	; (800034c <MX_I2C1_Init+0x74>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000300:	4b12      	ldr	r3, [pc, #72]	; (800034c <MX_I2C1_Init+0x74>)
 8000302:	2200      	movs	r2, #0
 8000304:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000306:	4b11      	ldr	r3, [pc, #68]	; (800034c <MX_I2C1_Init+0x74>)
 8000308:	2200      	movs	r2, #0
 800030a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800030c:	4b0f      	ldr	r3, [pc, #60]	; (800034c <MX_I2C1_Init+0x74>)
 800030e:	2200      	movs	r2, #0
 8000310:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000312:	480e      	ldr	r0, [pc, #56]	; (800034c <MX_I2C1_Init+0x74>)
 8000314:	f000 ff0a 	bl	800112c <HAL_I2C_Init>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800031e:	f000 f965 	bl	80005ec <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000322:	2100      	movs	r1, #0
 8000324:	4809      	ldr	r0, [pc, #36]	; (800034c <MX_I2C1_Init+0x74>)
 8000326:	f000 ff90 	bl	800124a <HAL_I2CEx_ConfigAnalogFilter>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000330:	f000 f95c 	bl	80005ec <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000334:	2100      	movs	r1, #0
 8000336:	4805      	ldr	r0, [pc, #20]	; (800034c <MX_I2C1_Init+0x74>)
 8000338:	f000 ffd2 	bl	80012e0 <HAL_I2CEx_ConfigDigitalFilter>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000342:	f000 f953 	bl	80005ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	20000048 	.word	0x20000048
 8000350:	40005400 	.word	0x40005400
 8000354:	2000090e 	.word	0x2000090e

08000358 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800035c:	4b1b      	ldr	r3, [pc, #108]	; (80003cc <MX_SPI1_Init+0x74>)
 800035e:	4a1c      	ldr	r2, [pc, #112]	; (80003d0 <MX_SPI1_Init+0x78>)
 8000360:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000362:	4b1a      	ldr	r3, [pc, #104]	; (80003cc <MX_SPI1_Init+0x74>)
 8000364:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000368:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800036a:	4b18      	ldr	r3, [pc, #96]	; (80003cc <MX_SPI1_Init+0x74>)
 800036c:	2200      	movs	r2, #0
 800036e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000370:	4b16      	ldr	r3, [pc, #88]	; (80003cc <MX_SPI1_Init+0x74>)
 8000372:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000376:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000378:	4b14      	ldr	r3, [pc, #80]	; (80003cc <MX_SPI1_Init+0x74>)
 800037a:	2200      	movs	r2, #0
 800037c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800037e:	4b13      	ldr	r3, [pc, #76]	; (80003cc <MX_SPI1_Init+0x74>)
 8000380:	2200      	movs	r2, #0
 8000382:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000384:	4b11      	ldr	r3, [pc, #68]	; (80003cc <MX_SPI1_Init+0x74>)
 8000386:	f44f 7200 	mov.w	r2, #512	; 0x200
 800038a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800038c:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <MX_SPI1_Init+0x74>)
 800038e:	2208      	movs	r2, #8
 8000390:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000392:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <MX_SPI1_Init+0x74>)
 8000394:	2200      	movs	r2, #0
 8000396:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000398:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <MX_SPI1_Init+0x74>)
 800039a:	2200      	movs	r2, #0
 800039c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800039e:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <MX_SPI1_Init+0x74>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003a4:	4b09      	ldr	r3, [pc, #36]	; (80003cc <MX_SPI1_Init+0x74>)
 80003a6:	2207      	movs	r2, #7
 80003a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003aa:	4b08      	ldr	r3, [pc, #32]	; (80003cc <MX_SPI1_Init+0x74>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <MX_SPI1_Init+0x74>)
 80003b2:	2208      	movs	r2, #8
 80003b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003b6:	4805      	ldr	r0, [pc, #20]	; (80003cc <MX_SPI1_Init+0x74>)
 80003b8:	f002 fb9e 	bl	8002af8 <HAL_SPI_Init>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80003c2:	f000 f913 	bl	80005ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	20000124 	.word	0x20000124
 80003d0:	40013000 	.word	0x40013000

080003d4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80003d8:	4b14      	ldr	r3, [pc, #80]	; (800042c <MX_UART5_Init+0x58>)
 80003da:	4a15      	ldr	r2, [pc, #84]	; (8000430 <MX_UART5_Init+0x5c>)
 80003dc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80003de:	4b13      	ldr	r3, [pc, #76]	; (800042c <MX_UART5_Init+0x58>)
 80003e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003e4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80003e6:	4b11      	ldr	r3, [pc, #68]	; (800042c <MX_UART5_Init+0x58>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80003ec:	4b0f      	ldr	r3, [pc, #60]	; (800042c <MX_UART5_Init+0x58>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80003f2:	4b0e      	ldr	r3, [pc, #56]	; (800042c <MX_UART5_Init+0x58>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80003f8:	4b0c      	ldr	r3, [pc, #48]	; (800042c <MX_UART5_Init+0x58>)
 80003fa:	220c      	movs	r2, #12
 80003fc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003fe:	4b0b      	ldr	r3, [pc, #44]	; (800042c <MX_UART5_Init+0x58>)
 8000400:	2200      	movs	r2, #0
 8000402:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000404:	4b09      	ldr	r3, [pc, #36]	; (800042c <MX_UART5_Init+0x58>)
 8000406:	2200      	movs	r2, #0
 8000408:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800040a:	4b08      	ldr	r3, [pc, #32]	; (800042c <MX_UART5_Init+0x58>)
 800040c:	2200      	movs	r2, #0
 800040e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <MX_UART5_Init+0x58>)
 8000412:	2200      	movs	r2, #0
 8000414:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000416:	4805      	ldr	r0, [pc, #20]	; (800042c <MX_UART5_Init+0x58>)
 8000418:	f002 fc19 	bl	8002c4e <HAL_UART_Init>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000422:	f000 f8e3 	bl	80005ec <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	2000009c 	.word	0x2000009c
 8000430:	40005000 	.word	0x40005000

08000434 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000438:	4b14      	ldr	r3, [pc, #80]	; (800048c <MX_USART2_UART_Init+0x58>)
 800043a:	4a15      	ldr	r2, [pc, #84]	; (8000490 <MX_USART2_UART_Init+0x5c>)
 800043c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800043e:	4b13      	ldr	r3, [pc, #76]	; (800048c <MX_USART2_UART_Init+0x58>)
 8000440:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000444:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000446:	4b11      	ldr	r3, [pc, #68]	; (800048c <MX_USART2_UART_Init+0x58>)
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800044c:	4b0f      	ldr	r3, [pc, #60]	; (800048c <MX_USART2_UART_Init+0x58>)
 800044e:	2200      	movs	r2, #0
 8000450:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000452:	4b0e      	ldr	r3, [pc, #56]	; (800048c <MX_USART2_UART_Init+0x58>)
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000458:	4b0c      	ldr	r3, [pc, #48]	; (800048c <MX_USART2_UART_Init+0x58>)
 800045a:	220c      	movs	r2, #12
 800045c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800045e:	4b0b      	ldr	r3, [pc, #44]	; (800048c <MX_USART2_UART_Init+0x58>)
 8000460:	2200      	movs	r2, #0
 8000462:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000464:	4b09      	ldr	r3, [pc, #36]	; (800048c <MX_USART2_UART_Init+0x58>)
 8000466:	2200      	movs	r2, #0
 8000468:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800046a:	4b08      	ldr	r3, [pc, #32]	; (800048c <MX_USART2_UART_Init+0x58>)
 800046c:	2200      	movs	r2, #0
 800046e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000470:	4b06      	ldr	r3, [pc, #24]	; (800048c <MX_USART2_UART_Init+0x58>)
 8000472:	2200      	movs	r2, #0
 8000474:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000476:	4805      	ldr	r0, [pc, #20]	; (800048c <MX_USART2_UART_Init+0x58>)
 8000478:	f002 fbe9 	bl	8002c4e <HAL_UART_Init>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000482:	f000 f8b3 	bl	80005ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	20000188 	.word	0x20000188
 8000490:	40004400 	.word	0x40004400

08000494 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000498:	4b0d      	ldr	r3, [pc, #52]	; (80004d0 <MX_USB_PCD_Init+0x3c>)
 800049a:	4a0e      	ldr	r2, [pc, #56]	; (80004d4 <MX_USB_PCD_Init+0x40>)
 800049c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800049e:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <MX_USB_PCD_Init+0x3c>)
 80004a0:	2208      	movs	r2, #8
 80004a2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80004a4:	4b0a      	ldr	r3, [pc, #40]	; (80004d0 <MX_USB_PCD_Init+0x3c>)
 80004a6:	2202      	movs	r2, #2
 80004a8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80004aa:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <MX_USB_PCD_Init+0x3c>)
 80004ac:	2202      	movs	r2, #2
 80004ae:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80004b0:	4b07      	ldr	r3, [pc, #28]	; (80004d0 <MX_USB_PCD_Init+0x3c>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80004b6:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <MX_USB_PCD_Init+0x3c>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80004bc:	4804      	ldr	r0, [pc, #16]	; (80004d0 <MX_USB_PCD_Init+0x3c>)
 80004be:	f000 ff5b 	bl	8001378 <HAL_PCD_Init>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80004c8:	f000 f890 	bl	80005ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000210 	.word	0x20000210
 80004d4:	40005c00 	.word	0x40005c00

080004d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08c      	sub	sp, #48	; 0x30
 80004dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 031c 	add.w	r3, r7, #28
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004ee:	4b3d      	ldr	r3, [pc, #244]	; (80005e4 <MX_GPIO_Init+0x10c>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	4a3c      	ldr	r2, [pc, #240]	; (80005e4 <MX_GPIO_Init+0x10c>)
 80004f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004f8:	6153      	str	r3, [r2, #20]
 80004fa:	4b3a      	ldr	r3, [pc, #232]	; (80005e4 <MX_GPIO_Init+0x10c>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000502:	61bb      	str	r3, [r7, #24]
 8000504:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000506:	4b37      	ldr	r3, [pc, #220]	; (80005e4 <MX_GPIO_Init+0x10c>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	4a36      	ldr	r2, [pc, #216]	; (80005e4 <MX_GPIO_Init+0x10c>)
 800050c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000510:	6153      	str	r3, [r2, #20]
 8000512:	4b34      	ldr	r3, [pc, #208]	; (80005e4 <MX_GPIO_Init+0x10c>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800051a:	617b      	str	r3, [r7, #20]
 800051c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800051e:	4b31      	ldr	r3, [pc, #196]	; (80005e4 <MX_GPIO_Init+0x10c>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	4a30      	ldr	r2, [pc, #192]	; (80005e4 <MX_GPIO_Init+0x10c>)
 8000524:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000528:	6153      	str	r3, [r2, #20]
 800052a:	4b2e      	ldr	r3, [pc, #184]	; (80005e4 <MX_GPIO_Init+0x10c>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	4b2b      	ldr	r3, [pc, #172]	; (80005e4 <MX_GPIO_Init+0x10c>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	4a2a      	ldr	r2, [pc, #168]	; (80005e4 <MX_GPIO_Init+0x10c>)
 800053c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000540:	6153      	str	r3, [r2, #20]
 8000542:	4b28      	ldr	r3, [pc, #160]	; (80005e4 <MX_GPIO_Init+0x10c>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800054e:	4b25      	ldr	r3, [pc, #148]	; (80005e4 <MX_GPIO_Init+0x10c>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	4a24      	ldr	r2, [pc, #144]	; (80005e4 <MX_GPIO_Init+0x10c>)
 8000554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000558:	6153      	str	r3, [r2, #20]
 800055a:	4b22      	ldr	r3, [pc, #136]	; (80005e4 <MX_GPIO_Init+0x10c>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000566:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <MX_GPIO_Init+0x10c>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	4a1e      	ldr	r2, [pc, #120]	; (80005e4 <MX_GPIO_Init+0x10c>)
 800056c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000570:	6153      	str	r3, [r2, #20]
 8000572:	4b1c      	ldr	r3, [pc, #112]	; (80005e4 <MX_GPIO_Init+0x10c>)
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800057e:	2200      	movs	r2, #0
 8000580:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000584:	4818      	ldr	r0, [pc, #96]	; (80005e8 <MX_GPIO_Init+0x110>)
 8000586:	f000 fdb9 	bl	80010fc <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800058a:	2337      	movs	r3, #55	; 0x37
 800058c:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800058e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000592:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	2300      	movs	r3, #0
 8000596:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000598:	f107 031c 	add.w	r3, r7, #28
 800059c:	4619      	mov	r1, r3
 800059e:	4812      	ldr	r0, [pc, #72]	; (80005e8 <MX_GPIO_Init+0x110>)
 80005a0:	f000 fc32 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80005a4:	f64f 7308 	movw	r3, #65288	; 0xff08
 80005a8:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005aa:	2301      	movs	r3, #1
 80005ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b2:	2300      	movs	r3, #0
 80005b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005b6:	f107 031c 	add.w	r3, r7, #28
 80005ba:	4619      	mov	r1, r3
 80005bc:	480a      	ldr	r0, [pc, #40]	; (80005e8 <MX_GPIO_Init+0x110>)
 80005be:	f000 fc23 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005c2:	2301      	movs	r3, #1
 80005c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c6:	2300      	movs	r3, #0
 80005c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005ce:	f107 031c 	add.w	r3, r7, #28
 80005d2:	4619      	mov	r1, r3
 80005d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d8:	f000 fc16 	bl	8000e08 <HAL_GPIO_Init>

}
 80005dc:	bf00      	nop
 80005de:	3730      	adds	r7, #48	; 0x30
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40021000 	.word	0x40021000
 80005e8:	48001000 	.word	0x48001000

080005ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f2:	e7fe      	b.n	80005f2 <Error_Handler+0x6>

080005f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <HAL_MspInit+0x44>)
 80005fc:	699b      	ldr	r3, [r3, #24]
 80005fe:	4a0e      	ldr	r2, [pc, #56]	; (8000638 <HAL_MspInit+0x44>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6193      	str	r3, [r2, #24]
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <HAL_MspInit+0x44>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <HAL_MspInit+0x44>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	4a08      	ldr	r2, [pc, #32]	; (8000638 <HAL_MspInit+0x44>)
 8000618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061c:	61d3      	str	r3, [r2, #28]
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <HAL_MspInit+0x44>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800062a:	2007      	movs	r0, #7
 800062c:	f000 fb34 	bl	8000c98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40021000 	.word	0x40021000

0800063c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08a      	sub	sp, #40	; 0x28
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a17      	ldr	r2, [pc, #92]	; (80006b8 <HAL_I2C_MspInit+0x7c>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d127      	bne.n	80006ae <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <HAL_I2C_MspInit+0x80>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	4a16      	ldr	r2, [pc, #88]	; (80006bc <HAL_I2C_MspInit+0x80>)
 8000664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000668:	6153      	str	r3, [r2, #20]
 800066a:	4b14      	ldr	r3, [pc, #80]	; (80006bc <HAL_I2C_MspInit+0x80>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000676:	23c0      	movs	r3, #192	; 0xc0
 8000678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800067a:	2312      	movs	r3, #18
 800067c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800067e:	2301      	movs	r3, #1
 8000680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000682:	2303      	movs	r3, #3
 8000684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000686:	2304      	movs	r3, #4
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	4619      	mov	r1, r3
 8000690:	480b      	ldr	r0, [pc, #44]	; (80006c0 <HAL_I2C_MspInit+0x84>)
 8000692:	f000 fbb9 	bl	8000e08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <HAL_I2C_MspInit+0x80>)
 8000698:	69db      	ldr	r3, [r3, #28]
 800069a:	4a08      	ldr	r2, [pc, #32]	; (80006bc <HAL_I2C_MspInit+0x80>)
 800069c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006a0:	61d3      	str	r3, [r2, #28]
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <HAL_I2C_MspInit+0x80>)
 80006a4:	69db      	ldr	r3, [r3, #28]
 80006a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80006ae:	bf00      	nop
 80006b0:	3728      	adds	r7, #40	; 0x28
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40005400 	.word	0x40005400
 80006bc:	40021000 	.word	0x40021000
 80006c0:	48000400 	.word	0x48000400

080006c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08a      	sub	sp, #40	; 0x28
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a17      	ldr	r2, [pc, #92]	; (8000740 <HAL_SPI_MspInit+0x7c>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d128      	bne.n	8000738 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006e6:	4b17      	ldr	r3, [pc, #92]	; (8000744 <HAL_SPI_MspInit+0x80>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	4a16      	ldr	r2, [pc, #88]	; (8000744 <HAL_SPI_MspInit+0x80>)
 80006ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006f0:	6193      	str	r3, [r2, #24]
 80006f2:	4b14      	ldr	r3, [pc, #80]	; (8000744 <HAL_SPI_MspInit+0x80>)
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <HAL_SPI_MspInit+0x80>)
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	4a10      	ldr	r2, [pc, #64]	; (8000744 <HAL_SPI_MspInit+0x80>)
 8000704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000708:	6153      	str	r3, [r2, #20]
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <HAL_SPI_MspInit+0x80>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000716:	23e0      	movs	r3, #224	; 0xe0
 8000718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071a:	2302      	movs	r3, #2
 800071c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000722:	2303      	movs	r3, #3
 8000724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000726:	2305      	movs	r3, #5
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	4619      	mov	r1, r3
 8000730:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000734:	f000 fb68 	bl	8000e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000738:	bf00      	nop
 800073a:	3728      	adds	r7, #40	; 0x28
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40013000 	.word	0x40013000
 8000744:	40021000 	.word	0x40021000

08000748 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08c      	sub	sp, #48	; 0x30
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000750:	f107 031c 	add.w	r3, r7, #28
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a41      	ldr	r2, [pc, #260]	; (800086c <HAL_UART_MspInit+0x124>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d145      	bne.n	80007f6 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800076a:	4b41      	ldr	r3, [pc, #260]	; (8000870 <HAL_UART_MspInit+0x128>)
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	4a40      	ldr	r2, [pc, #256]	; (8000870 <HAL_UART_MspInit+0x128>)
 8000770:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000774:	61d3      	str	r3, [r2, #28]
 8000776:	4b3e      	ldr	r3, [pc, #248]	; (8000870 <HAL_UART_MspInit+0x128>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800077e:	61bb      	str	r3, [r7, #24]
 8000780:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	4b3b      	ldr	r3, [pc, #236]	; (8000870 <HAL_UART_MspInit+0x128>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	4a3a      	ldr	r2, [pc, #232]	; (8000870 <HAL_UART_MspInit+0x128>)
 8000788:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800078c:	6153      	str	r3, [r2, #20]
 800078e:	4b38      	ldr	r3, [pc, #224]	; (8000870 <HAL_UART_MspInit+0x128>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000796:	617b      	str	r3, [r7, #20]
 8000798:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800079a:	4b35      	ldr	r3, [pc, #212]	; (8000870 <HAL_UART_MspInit+0x128>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	4a34      	ldr	r2, [pc, #208]	; (8000870 <HAL_UART_MspInit+0x128>)
 80007a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80007a4:	6153      	str	r3, [r2, #20]
 80007a6:	4b32      	ldr	r3, [pc, #200]	; (8000870 <HAL_UART_MspInit+0x128>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80007b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b8:	2302      	movs	r3, #2
 80007ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c0:	2303      	movs	r3, #3
 80007c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80007c4:	2305      	movs	r3, #5
 80007c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	4619      	mov	r1, r3
 80007ce:	4829      	ldr	r0, [pc, #164]	; (8000874 <HAL_UART_MspInit+0x12c>)
 80007d0:	f000 fb1a 	bl	8000e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007d4:	2304      	movs	r3, #4
 80007d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d8:	2302      	movs	r3, #2
 80007da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007e0:	2303      	movs	r3, #3
 80007e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80007e4:	2305      	movs	r3, #5
 80007e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007e8:	f107 031c 	add.w	r3, r7, #28
 80007ec:	4619      	mov	r1, r3
 80007ee:	4822      	ldr	r0, [pc, #136]	; (8000878 <HAL_UART_MspInit+0x130>)
 80007f0:	f000 fb0a 	bl	8000e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007f4:	e035      	b.n	8000862 <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART2)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a20      	ldr	r2, [pc, #128]	; (800087c <HAL_UART_MspInit+0x134>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d130      	bne.n	8000862 <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000800:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <HAL_UART_MspInit+0x128>)
 8000802:	69db      	ldr	r3, [r3, #28]
 8000804:	4a1a      	ldr	r2, [pc, #104]	; (8000870 <HAL_UART_MspInit+0x128>)
 8000806:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800080a:	61d3      	str	r3, [r2, #28]
 800080c:	4b18      	ldr	r3, [pc, #96]	; (8000870 <HAL_UART_MspInit+0x128>)
 800080e:	69db      	ldr	r3, [r3, #28]
 8000810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000818:	4b15      	ldr	r3, [pc, #84]	; (8000870 <HAL_UART_MspInit+0x128>)
 800081a:	695b      	ldr	r3, [r3, #20]
 800081c:	4a14      	ldr	r2, [pc, #80]	; (8000870 <HAL_UART_MspInit+0x128>)
 800081e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000822:	6153      	str	r3, [r2, #20]
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <HAL_UART_MspInit+0x128>)
 8000826:	695b      	ldr	r3, [r3, #20]
 8000828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000830:	230c      	movs	r3, #12
 8000832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000834:	2302      	movs	r3, #2
 8000836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800083c:	2303      	movs	r3, #3
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000840:	2307      	movs	r3, #7
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	4619      	mov	r1, r3
 800084a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084e:	f000 fadb 	bl	8000e08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	2100      	movs	r1, #0
 8000856:	2026      	movs	r0, #38	; 0x26
 8000858:	f000 fa29 	bl	8000cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800085c:	2026      	movs	r0, #38	; 0x26
 800085e:	f000 fa42 	bl	8000ce6 <HAL_NVIC_EnableIRQ>
}
 8000862:	bf00      	nop
 8000864:	3730      	adds	r7, #48	; 0x30
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40005000 	.word	0x40005000
 8000870:	40021000 	.word	0x40021000
 8000874:	48000800 	.word	0x48000800
 8000878:	48000c00 	.word	0x48000c00
 800087c:	40004400 	.word	0x40004400

08000880 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	; 0x28
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a18      	ldr	r2, [pc, #96]	; (8000900 <HAL_PCD_MspInit+0x80>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d129      	bne.n	80008f6 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	4b18      	ldr	r3, [pc, #96]	; (8000904 <HAL_PCD_MspInit+0x84>)
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	4a17      	ldr	r2, [pc, #92]	; (8000904 <HAL_PCD_MspInit+0x84>)
 80008a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ac:	6153      	str	r3, [r2, #20]
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <HAL_PCD_MspInit+0x84>)
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80008ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c8:	2303      	movs	r3, #3
 80008ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80008cc:	230e      	movs	r3, #14
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	4619      	mov	r1, r3
 80008d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008da:	f000 fa95 	bl	8000e08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <HAL_PCD_MspInit+0x84>)
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	4a08      	ldr	r2, [pc, #32]	; (8000904 <HAL_PCD_MspInit+0x84>)
 80008e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80008e8:	61d3      	str	r3, [r2, #28]
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_PCD_MspInit+0x84>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80008f6:	bf00      	nop
 80008f8:	3728      	adds	r7, #40	; 0x28
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40005c00 	.word	0x40005c00
 8000904:	40021000 	.word	0x40021000

08000908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800090c:	e7fe      	b.n	800090c <NMI_Handler+0x4>

0800090e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <HardFault_Handler+0x4>

08000914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <MemManage_Handler+0x4>

0800091a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <BusFault_Handler+0x4>

08000920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <UsageFault_Handler+0x4>

08000926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000954:	f000 f88e 	bl	8000a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}

0800095c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000960:	4802      	ldr	r0, [pc, #8]	; (800096c <USART2_IRQHandler+0x10>)
 8000962:	f002 fa4d 	bl	8002e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000188 	.word	0x20000188

08000970 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <SystemInit+0x20>)
 8000976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800097a:	4a05      	ldr	r2, [pc, #20]	; (8000990 <SystemInit+0x20>)
 800097c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000980:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000994:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009cc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000998:	f7ff ffea 	bl	8000970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800099c:	480c      	ldr	r0, [pc, #48]	; (80009d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800099e:	490d      	ldr	r1, [pc, #52]	; (80009d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009a0:	4a0d      	ldr	r2, [pc, #52]	; (80009d8 <LoopForever+0xe>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a4:	e002      	b.n	80009ac <LoopCopyDataInit>

080009a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009aa:	3304      	adds	r3, #4

080009ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b0:	d3f9      	bcc.n	80009a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b2:	4a0a      	ldr	r2, [pc, #40]	; (80009dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80009b4:	4c0a      	ldr	r4, [pc, #40]	; (80009e0 <LoopForever+0x16>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b8:	e001      	b.n	80009be <LoopFillZerobss>

080009ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009bc:	3204      	adds	r2, #4

080009be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c0:	d3fb      	bcc.n	80009ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009c2:	f003 f991 	bl	8003ce8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009c6:	f7ff fbff 	bl	80001c8 <main>

080009ca <LoopForever>:

LoopForever:
    b LoopForever
 80009ca:	e7fe      	b.n	80009ca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009cc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80009d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d4:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80009d8:	08003d98 	.word	0x08003d98
  ldr r2, =_sbss
 80009dc:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80009e0:	20000500 	.word	0x20000500

080009e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009e4:	e7fe      	b.n	80009e4 <ADC1_2_IRQHandler>
	...

080009e8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <HAL_Init+0x28>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a07      	ldr	r2, [pc, #28]	; (8000a10 <HAL_Init+0x28>)
 80009f2:	f043 0310 	orr.w	r3, r3, #16
 80009f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f8:	2003      	movs	r0, #3
 80009fa:	f000 f94d 	bl	8000c98 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009fe:	2000      	movs	r0, #0
 8000a00:	f000 f808 	bl	8000a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a04:	f7ff fdf6 	bl	80005f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40022000 	.word	0x40022000

08000a14 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <HAL_InitTick+0x54>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_InitTick+0x58>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	4619      	mov	r1, r3
 8000a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 f965 	bl	8000d02 <HAL_SYSTICK_Config>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e00e      	b.n	8000a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b0f      	cmp	r3, #15
 8000a46:	d80a      	bhi.n	8000a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	6879      	ldr	r1, [r7, #4]
 8000a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a50:	f000 f92d 	bl	8000cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a54:	4a06      	ldr	r2, [pc, #24]	; (8000a70 <HAL_InitTick+0x5c>)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	e000      	b.n	8000a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000020 	.word	0x20000020
 8000a6c:	20000028 	.word	0x20000028
 8000a70:	20000024 	.word	0x20000024

08000a74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_IncTick+0x20>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_IncTick+0x24>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4413      	add	r3, r2
 8000a84:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <HAL_IncTick+0x24>)
 8000a86:	6013      	str	r3, [r2, #0]
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	20000028 	.word	0x20000028
 8000a98:	200004fc 	.word	0x200004fc

08000a9c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000aa0:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <HAL_GetTick+0x14>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	200004fc 	.word	0x200004fc

08000ab4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000abc:	f7ff ffee 	bl	8000a9c <HAL_GetTick>
 8000ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000acc:	d005      	beq.n	8000ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <HAL_Delay+0x40>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ada:	bf00      	nop
 8000adc:	f7ff ffde 	bl	8000a9c <HAL_GetTick>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d8f7      	bhi.n	8000adc <HAL_Delay+0x28>
  {
  }
}
 8000aec:	bf00      	nop
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000028 	.word	0x20000028

08000af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b0e:	68ba      	ldr	r2, [r7, #8]
 8000b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b14:	4013      	ands	r3, r2
 8000b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2a:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	60d3      	str	r3, [r2, #12]
}
 8000b30:	bf00      	nop
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <__NVIC_GetPriorityGrouping+0x18>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	0a1b      	lsrs	r3, r3, #8
 8000b4a:	f003 0307 	and.w	r3, r3, #7
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	db0b      	blt.n	8000b86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	f003 021f 	and.w	r2, r3, #31
 8000b74:	4907      	ldr	r1, [pc, #28]	; (8000b94 <__NVIC_EnableIRQ+0x38>)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	095b      	lsrs	r3, r3, #5
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000e100 	.word	0xe000e100

08000b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	db0a      	blt.n	8000bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	490c      	ldr	r1, [pc, #48]	; (8000be4 <__NVIC_SetPriority+0x4c>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	440b      	add	r3, r1
 8000bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc0:	e00a      	b.n	8000bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4908      	ldr	r1, [pc, #32]	; (8000be8 <__NVIC_SetPriority+0x50>)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	f003 030f 	and.w	r3, r3, #15
 8000bce:	3b04      	subs	r3, #4
 8000bd0:	0112      	lsls	r2, r2, #4
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	761a      	strb	r2, [r3, #24]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000e100 	.word	0xe000e100
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	; 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	f1c3 0307 	rsb	r3, r3, #7
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	bf28      	it	cs
 8000c0a:	2304      	movcs	r3, #4
 8000c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3304      	adds	r3, #4
 8000c12:	2b06      	cmp	r3, #6
 8000c14:	d902      	bls.n	8000c1c <NVIC_EncodePriority+0x30>
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3b03      	subs	r3, #3
 8000c1a:	e000      	b.n	8000c1e <NVIC_EncodePriority+0x32>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	401a      	ands	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	43d9      	mvns	r1, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	4313      	orrs	r3, r2
         );
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3724      	adds	r7, #36	; 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c64:	d301      	bcc.n	8000c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c66:	2301      	movs	r3, #1
 8000c68:	e00f      	b.n	8000c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <SysTick_Config+0x40>)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c72:	210f      	movs	r1, #15
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295
 8000c78:	f7ff ff8e 	bl	8000b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <SysTick_Config+0x40>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c82:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <SysTick_Config+0x40>)
 8000c84:	2207      	movs	r2, #7
 8000c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	e000e010 	.word	0xe000e010

08000c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff ff29 	bl	8000af8 <__NVIC_SetPriorityGrouping>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b086      	sub	sp, #24
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
 8000cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc0:	f7ff ff3e 	bl	8000b40 <__NVIC_GetPriorityGrouping>
 8000cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	68b9      	ldr	r1, [r7, #8]
 8000cca:	6978      	ldr	r0, [r7, #20]
 8000ccc:	f7ff ff8e 	bl	8000bec <NVIC_EncodePriority>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff5d 	bl	8000b98 <__NVIC_SetPriority>
}
 8000cde:	bf00      	nop
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff31 	bl	8000b5c <__NVIC_EnableIRQ>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff ffa2 	bl	8000c54 <SysTick_Config>
 8000d10:	4603      	mov	r3, r0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d008      	beq.n	8000d3e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2204      	movs	r2, #4
 8000d30:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e020      	b.n	8000d80 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f022 020e 	bic.w	r2, r2, #14
 8000d4c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f022 0201 	bic.w	r2, r2, #1
 8000d5c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d66:	2101      	movs	r1, #1
 8000d68:	fa01 f202 	lsl.w	r2, r1, r2
 8000d6c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2201      	movs	r2, #1
 8000d72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000d7e:	2300      	movs	r3, #0
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d94:	2300      	movs	r3, #0
 8000d96:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d005      	beq.n	8000dae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2204      	movs	r2, #4
 8000da6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	73fb      	strb	r3, [r7, #15]
 8000dac:	e027      	b.n	8000dfe <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f022 020e 	bic.w	r2, r2, #14
 8000dbc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f022 0201 	bic.w	r2, r2, #1
 8000dcc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ddc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2201      	movs	r2, #1
 8000de2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2200      	movs	r2, #0
 8000dea:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d003      	beq.n	8000dfe <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	4798      	blx	r3
    } 
  }
  return status;
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b087      	sub	sp, #28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e16:	e154      	b.n	80010c2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	fa01 f303 	lsl.w	r3, r1, r3
 8000e24:	4013      	ands	r3, r2
 8000e26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	f000 8146 	beq.w	80010bc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d005      	beq.n	8000e48 <HAL_GPIO_Init+0x40>
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d130      	bne.n	8000eaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	2203      	movs	r2, #3
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	68da      	ldr	r2, [r3, #12]
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e7e:	2201      	movs	r2, #1
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	091b      	lsrs	r3, r3, #4
 8000e94:	f003 0201 	and.w	r2, r3, #1
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	2b03      	cmp	r3, #3
 8000eb4:	d017      	beq.n	8000ee6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	689a      	ldr	r2, [r3, #8]
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f003 0303 	and.w	r3, r3, #3
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d123      	bne.n	8000f3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	08da      	lsrs	r2, r3, #3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3208      	adds	r2, #8
 8000efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000efe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	220f      	movs	r2, #15
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4013      	ands	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	691a      	ldr	r2, [r3, #16]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	f003 0307 	and.w	r3, r3, #7
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	08da      	lsrs	r2, r3, #3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3208      	adds	r2, #8
 8000f34:	6939      	ldr	r1, [r7, #16]
 8000f36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	2203      	movs	r2, #3
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f003 0203 	and.w	r2, r3, #3
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f000 80a0 	beq.w	80010bc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7c:	4b58      	ldr	r3, [pc, #352]	; (80010e0 <HAL_GPIO_Init+0x2d8>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	4a57      	ldr	r2, [pc, #348]	; (80010e0 <HAL_GPIO_Init+0x2d8>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	6193      	str	r3, [r2, #24]
 8000f88:	4b55      	ldr	r3, [pc, #340]	; (80010e0 <HAL_GPIO_Init+0x2d8>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f94:	4a53      	ldr	r2, [pc, #332]	; (80010e4 <HAL_GPIO_Init+0x2dc>)
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	089b      	lsrs	r3, r3, #2
 8000f9a:	3302      	adds	r3, #2
 8000f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	f003 0303 	and.w	r3, r3, #3
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	220f      	movs	r2, #15
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fbe:	d019      	beq.n	8000ff4 <HAL_GPIO_Init+0x1ec>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a49      	ldr	r2, [pc, #292]	; (80010e8 <HAL_GPIO_Init+0x2e0>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d013      	beq.n	8000ff0 <HAL_GPIO_Init+0x1e8>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a48      	ldr	r2, [pc, #288]	; (80010ec <HAL_GPIO_Init+0x2e4>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d00d      	beq.n	8000fec <HAL_GPIO_Init+0x1e4>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a47      	ldr	r2, [pc, #284]	; (80010f0 <HAL_GPIO_Init+0x2e8>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d007      	beq.n	8000fe8 <HAL_GPIO_Init+0x1e0>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a46      	ldr	r2, [pc, #280]	; (80010f4 <HAL_GPIO_Init+0x2ec>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d101      	bne.n	8000fe4 <HAL_GPIO_Init+0x1dc>
 8000fe0:	2304      	movs	r3, #4
 8000fe2:	e008      	b.n	8000ff6 <HAL_GPIO_Init+0x1ee>
 8000fe4:	2305      	movs	r3, #5
 8000fe6:	e006      	b.n	8000ff6 <HAL_GPIO_Init+0x1ee>
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e004      	b.n	8000ff6 <HAL_GPIO_Init+0x1ee>
 8000fec:	2302      	movs	r3, #2
 8000fee:	e002      	b.n	8000ff6 <HAL_GPIO_Init+0x1ee>
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e000      	b.n	8000ff6 <HAL_GPIO_Init+0x1ee>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	f002 0203 	and.w	r2, r2, #3
 8000ffc:	0092      	lsls	r2, r2, #2
 8000ffe:	4093      	lsls	r3, r2
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001006:	4937      	ldr	r1, [pc, #220]	; (80010e4 <HAL_GPIO_Init+0x2dc>)
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	089b      	lsrs	r3, r3, #2
 800100c:	3302      	adds	r3, #2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001014:	4b38      	ldr	r3, [pc, #224]	; (80010f8 <HAL_GPIO_Init+0x2f0>)
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	43db      	mvns	r3, r3
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d003      	beq.n	8001038 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001038:	4a2f      	ldr	r2, [pc, #188]	; (80010f8 <HAL_GPIO_Init+0x2f0>)
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800103e:	4b2e      	ldr	r3, [pc, #184]	; (80010f8 <HAL_GPIO_Init+0x2f0>)
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	43db      	mvns	r3, r3
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4013      	ands	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4313      	orrs	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001062:	4a25      	ldr	r2, [pc, #148]	; (80010f8 <HAL_GPIO_Init+0x2f0>)
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001068:	4b23      	ldr	r3, [pc, #140]	; (80010f8 <HAL_GPIO_Init+0x2f0>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	43db      	mvns	r3, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800108c:	4a1a      	ldr	r2, [pc, #104]	; (80010f8 <HAL_GPIO_Init+0x2f0>)
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <HAL_GPIO_Init+0x2f0>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010b6:	4a10      	ldr	r2, [pc, #64]	; (80010f8 <HAL_GPIO_Init+0x2f0>)
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	3301      	adds	r3, #1
 80010c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	fa22 f303 	lsr.w	r3, r2, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f47f aea3 	bne.w	8000e18 <HAL_GPIO_Init+0x10>
  }
}
 80010d2:	bf00      	nop
 80010d4:	371c      	adds	r7, #28
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40010000 	.word	0x40010000
 80010e8:	48000400 	.word	0x48000400
 80010ec:	48000800 	.word	0x48000800
 80010f0:	48000c00 	.word	0x48000c00
 80010f4:	48001000 	.word	0x48001000
 80010f8:	40010400 	.word	0x40010400

080010fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	807b      	strh	r3, [r7, #2]
 8001108:	4613      	mov	r3, r2
 800110a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800110c:	787b      	ldrb	r3, [r7, #1]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001112:	887a      	ldrh	r2, [r7, #2]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001118:	e002      	b.n	8001120 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800111a:	887a      	ldrh	r2, [r7, #2]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e081      	b.n	8001242 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d106      	bne.n	8001158 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff fa72 	bl	800063c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2224      	movs	r2, #36	; 0x24
 800115c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f022 0201 	bic.w	r2, r2, #1
 800116e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685a      	ldr	r2, [r3, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800117c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800118c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d107      	bne.n	80011a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689a      	ldr	r2, [r3, #8]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	e006      	b.n	80011b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689a      	ldr	r2, [r3, #8]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80011b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d104      	bne.n	80011c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	6812      	ldr	r2, [r2, #0]
 80011d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	68da      	ldr	r2, [r3, #12]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	691a      	ldr	r2, [r3, #16]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	430a      	orrs	r2, r1
 8001202:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69d9      	ldr	r1, [r3, #28]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a1a      	ldr	r2, [r3, #32]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	430a      	orrs	r2, r1
 8001212:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f042 0201 	orr.w	r2, r2, #1
 8001222:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2220      	movs	r2, #32
 800122e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
 8001252:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b20      	cmp	r3, #32
 800125e:	d138      	bne.n	80012d2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001266:	2b01      	cmp	r3, #1
 8001268:	d101      	bne.n	800126e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800126a:	2302      	movs	r3, #2
 800126c:	e032      	b.n	80012d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2201      	movs	r2, #1
 8001272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2224      	movs	r2, #36	; 0x24
 800127a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 0201 	bic.w	r2, r2, #1
 800128c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800129c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	6819      	ldr	r1, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	430a      	orrs	r2, r1
 80012ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f042 0201 	orr.w	r2, r2, #1
 80012bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2220      	movs	r2, #32
 80012c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	e000      	b.n	80012d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80012d2:	2302      	movs	r3, #2
  }
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b20      	cmp	r3, #32
 80012f4:	d139      	bne.n	800136a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d101      	bne.n	8001304 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001300:	2302      	movs	r3, #2
 8001302:	e033      	b.n	800136c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2201      	movs	r2, #1
 8001308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2224      	movs	r2, #36	; 0x24
 8001310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0201 	bic.w	r2, r2, #1
 8001322:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001332:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	021b      	lsls	r3, r3, #8
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	4313      	orrs	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f042 0201 	orr.w	r2, r2, #1
 8001354:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2220      	movs	r2, #32
 800135a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001366:	2300      	movs	r3, #0
 8001368:	e000      	b.n	800136c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800136a:	2302      	movs	r3, #2
  }
}
 800136c:	4618      	mov	r0, r3
 800136e:	3714      	adds	r7, #20
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137a:	b08b      	sub	sp, #44	; 0x2c
 800137c:	af06      	add	r7, sp, #24
 800137e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e0c4      	b.n	8001514 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d106      	bne.n	80013a4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff fa6e 	bl	8000880 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2203      	movs	r2, #3
 80013a8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f002 fc5c 	bl	8003c6e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	73fb      	strb	r3, [r7, #15]
 80013ba:	e040      	b.n	800143e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	1c5a      	adds	r2, r3, #1
 80013c2:	4613      	mov	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	440b      	add	r3, r1
 80013cc:	3301      	adds	r3, #1
 80013ce:	2201      	movs	r2, #1
 80013d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
 80013d4:	6879      	ldr	r1, [r7, #4]
 80013d6:	1c5a      	adds	r2, r3, #1
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	440b      	add	r3, r1
 80013e2:	7bfa      	ldrb	r2, [r7, #15]
 80013e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	1c5a      	adds	r2, r3, #1
 80013ec:	4613      	mov	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4413      	add	r3, r2
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	440b      	add	r3, r1
 80013f6:	3303      	adds	r3, #3
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013fc:	7bfa      	ldrb	r2, [r7, #15]
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	4613      	mov	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	440b      	add	r3, r1
 800140a:	3338      	adds	r3, #56	; 0x38
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001410:	7bfa      	ldrb	r2, [r7, #15]
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	4613      	mov	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	440b      	add	r3, r1
 800141e:	333c      	adds	r3, #60	; 0x3c
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001424:	7bfa      	ldrb	r2, [r7, #15]
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	4613      	mov	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	440b      	add	r3, r1
 8001432:	3340      	adds	r3, #64	; 0x40
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	3301      	adds	r3, #1
 800143c:	73fb      	strb	r3, [r7, #15]
 800143e:	7bfa      	ldrb	r2, [r7, #15]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	429a      	cmp	r2, r3
 8001446:	d3b9      	bcc.n	80013bc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001448:	2300      	movs	r3, #0
 800144a:	73fb      	strb	r3, [r7, #15]
 800144c:	e044      	b.n	80014d8 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800144e:	7bfa      	ldrb	r2, [r7, #15]
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	440b      	add	r3, r1
 800145c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001460:	2200      	movs	r2, #0
 8001462:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001464:	7bfa      	ldrb	r2, [r7, #15]
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	440b      	add	r3, r1
 8001472:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001476:	7bfa      	ldrb	r2, [r7, #15]
 8001478:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800147a:	7bfa      	ldrb	r2, [r7, #15]
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	4613      	mov	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	440b      	add	r3, r1
 8001488:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001490:	7bfa      	ldrb	r2, [r7, #15]
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	4613      	mov	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	440b      	add	r3, r1
 800149e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014a6:	7bfa      	ldrb	r2, [r7, #15]
 80014a8:	6879      	ldr	r1, [r7, #4]
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	440b      	add	r3, r1
 80014b4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014bc:	7bfa      	ldrb	r2, [r7, #15]
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	4613      	mov	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	440b      	add	r3, r1
 80014ca:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	3301      	adds	r3, #1
 80014d6:	73fb      	strb	r3, [r7, #15]
 80014d8:	7bfa      	ldrb	r2, [r7, #15]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d3b5      	bcc.n	800144e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	603b      	str	r3, [r7, #0]
 80014e8:	687e      	ldr	r6, [r7, #4]
 80014ea:	466d      	mov	r5, sp
 80014ec:	f106 0410 	add.w	r4, r6, #16
 80014f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f4:	6823      	ldr	r3, [r4, #0]
 80014f6:	602b      	str	r3, [r5, #0]
 80014f8:	1d33      	adds	r3, r6, #4
 80014fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014fc:	6838      	ldr	r0, [r7, #0]
 80014fe:	f002 fbd1 	bl	8003ca4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2201      	movs	r2, #1
 800150e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800151c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001522:	af00      	add	r7, sp, #0
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d102      	bne.n	8001536 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	f000 bef4 	b.w	800231e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	2b00      	cmp	r3, #0
 8001542:	f000 816a 	beq.w	800181a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001546:	4bb3      	ldr	r3, [pc, #716]	; (8001814 <HAL_RCC_OscConfig+0x2f8>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f003 030c 	and.w	r3, r3, #12
 800154e:	2b04      	cmp	r3, #4
 8001550:	d00c      	beq.n	800156c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001552:	4bb0      	ldr	r3, [pc, #704]	; (8001814 <HAL_RCC_OscConfig+0x2f8>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f003 030c 	and.w	r3, r3, #12
 800155a:	2b08      	cmp	r3, #8
 800155c:	d159      	bne.n	8001612 <HAL_RCC_OscConfig+0xf6>
 800155e:	4bad      	ldr	r3, [pc, #692]	; (8001814 <HAL_RCC_OscConfig+0x2f8>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800156a:	d152      	bne.n	8001612 <HAL_RCC_OscConfig+0xf6>
 800156c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001570:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001574:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001578:	fa93 f3a3 	rbit	r3, r3
 800157c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001580:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001584:	fab3 f383 	clz	r3, r3
 8001588:	b2db      	uxtb	r3, r3
 800158a:	095b      	lsrs	r3, r3, #5
 800158c:	b2db      	uxtb	r3, r3
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b01      	cmp	r3, #1
 8001596:	d102      	bne.n	800159e <HAL_RCC_OscConfig+0x82>
 8001598:	4b9e      	ldr	r3, [pc, #632]	; (8001814 <HAL_RCC_OscConfig+0x2f8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	e015      	b.n	80015ca <HAL_RCC_OscConfig+0xae>
 800159e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015a2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80015aa:	fa93 f3a3 	rbit	r3, r3
 80015ae:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80015b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015b6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80015ba:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80015be:	fa93 f3a3 	rbit	r3, r3
 80015c2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80015c6:	4b93      	ldr	r3, [pc, #588]	; (8001814 <HAL_RCC_OscConfig+0x2f8>)
 80015c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015ce:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80015d2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80015d6:	fa92 f2a2 	rbit	r2, r2
 80015da:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80015de:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80015e2:	fab2 f282 	clz	r2, r2
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	f042 0220 	orr.w	r2, r2, #32
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	f002 021f 	and.w	r2, r2, #31
 80015f2:	2101      	movs	r1, #1
 80015f4:	fa01 f202 	lsl.w	r2, r1, r2
 80015f8:	4013      	ands	r3, r2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f000 810c 	beq.w	8001818 <HAL_RCC_OscConfig+0x2fc>
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	f040 8106 	bne.w	8001818 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	f000 be86 	b.w	800231e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800161c:	d106      	bne.n	800162c <HAL_RCC_OscConfig+0x110>
 800161e:	4b7d      	ldr	r3, [pc, #500]	; (8001814 <HAL_RCC_OscConfig+0x2f8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a7c      	ldr	r2, [pc, #496]	; (8001814 <HAL_RCC_OscConfig+0x2f8>)
 8001624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	e030      	b.n	800168e <HAL_RCC_OscConfig+0x172>
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d10c      	bne.n	8001650 <HAL_RCC_OscConfig+0x134>
 8001636:	4b77      	ldr	r3, [pc, #476]	; (8001814 <HAL_RCC_OscConfig+0x2f8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a76      	ldr	r2, [pc, #472]	; (8001814 <HAL_RCC_OscConfig+0x2f8>)
 800163c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	4b74      	ldr	r3, [pc, #464]	; (8001814 <HAL_RCC_OscConfig+0x2f8>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a73      	ldr	r2, [pc, #460]	; (8001814 <HAL_RCC_OscConfig+0x2f8>)
 8001648:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	e01e      	b.n	800168e <HAL_RCC_OscConfig+0x172>
 8001650:	1d3b      	adds	r3, r7, #4
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800165a:	d10c      	bne.n	8001676 <HAL_RCC_OscConfig+0x15a>
 800165c:	4b6d      	ldr	r3, [pc, #436]	; (8001814 <HAL_RCC_OscConfig+0x2f8>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a6c      	ldr	r2, [pc, #432]	; (8001814 <HAL_RCC_OscConfig+0x2f8>)
 8001662:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	4b6a      	ldr	r3, [pc, #424]	; (8001814 <HAL_RCC_OscConfig+0x2f8>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a69      	ldr	r2, [pc, #420]	; (8001814 <HAL_RCC_OscConfig+0x2f8>)
 800166e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	e00b      	b.n	800168e <HAL_RCC_OscConfig+0x172>
 8001676:	4b67      	ldr	r3, [pc, #412]	; (8001814 <HAL_RCC_OscConfig+0x2f8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a66      	ldr	r2, [pc, #408]	; (8001814 <HAL_RCC_OscConfig+0x2f8>)
 800167c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	4b64      	ldr	r3, [pc, #400]	; (8001814 <HAL_RCC_OscConfig+0x2f8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a63      	ldr	r2, [pc, #396]	; (8001814 <HAL_RCC_OscConfig+0x2f8>)
 8001688:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800168c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800168e:	4b61      	ldr	r3, [pc, #388]	; (8001814 <HAL_RCC_OscConfig+0x2f8>)
 8001690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001692:	f023 020f 	bic.w	r2, r3, #15
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	495d      	ldr	r1, [pc, #372]	; (8001814 <HAL_RCC_OscConfig+0x2f8>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d059      	beq.n	8001760 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ac:	f7ff f9f6 	bl	8000a9c <HAL_GetTick>
 80016b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b4:	e00a      	b.n	80016cc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016b6:	f7ff f9f1 	bl	8000a9c <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b64      	cmp	r3, #100	; 0x64
 80016c4:	d902      	bls.n	80016cc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	f000 be29 	b.w	800231e <HAL_RCC_OscConfig+0xe02>
 80016cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016d0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80016d8:	fa93 f3a3 	rbit	r3, r3
 80016dc:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80016e0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e4:	fab3 f383 	clz	r3, r3
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	095b      	lsrs	r3, r3, #5
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d102      	bne.n	80016fe <HAL_RCC_OscConfig+0x1e2>
 80016f8:	4b46      	ldr	r3, [pc, #280]	; (8001814 <HAL_RCC_OscConfig+0x2f8>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	e015      	b.n	800172a <HAL_RCC_OscConfig+0x20e>
 80016fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001702:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001706:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800170a:	fa93 f3a3 	rbit	r3, r3
 800170e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001712:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001716:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800171a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800171e:	fa93 f3a3 	rbit	r3, r3
 8001722:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001726:	4b3b      	ldr	r3, [pc, #236]	; (8001814 <HAL_RCC_OscConfig+0x2f8>)
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800172e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001732:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001736:	fa92 f2a2 	rbit	r2, r2
 800173a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800173e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001742:	fab2 f282 	clz	r2, r2
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	f042 0220 	orr.w	r2, r2, #32
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	f002 021f 	and.w	r2, r2, #31
 8001752:	2101      	movs	r1, #1
 8001754:	fa01 f202 	lsl.w	r2, r1, r2
 8001758:	4013      	ands	r3, r2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0ab      	beq.n	80016b6 <HAL_RCC_OscConfig+0x19a>
 800175e:	e05c      	b.n	800181a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff f99c 	bl	8000a9c <HAL_GetTick>
 8001764:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001768:	e00a      	b.n	8001780 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800176a:	f7ff f997 	bl	8000a9c <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b64      	cmp	r3, #100	; 0x64
 8001778:	d902      	bls.n	8001780 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	f000 bdcf 	b.w	800231e <HAL_RCC_OscConfig+0xe02>
 8001780:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001784:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001788:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800178c:	fa93 f3a3 	rbit	r3, r3
 8001790:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001794:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001798:	fab3 f383 	clz	r3, r3
 800179c:	b2db      	uxtb	r3, r3
 800179e:	095b      	lsrs	r3, r3, #5
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d102      	bne.n	80017b2 <HAL_RCC_OscConfig+0x296>
 80017ac:	4b19      	ldr	r3, [pc, #100]	; (8001814 <HAL_RCC_OscConfig+0x2f8>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	e015      	b.n	80017de <HAL_RCC_OscConfig+0x2c2>
 80017b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017b6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ba:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80017be:	fa93 f3a3 	rbit	r3, r3
 80017c2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80017c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017ca:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80017ce:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80017d2:	fa93 f3a3 	rbit	r3, r3
 80017d6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80017da:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <HAL_RCC_OscConfig+0x2f8>)
 80017dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017e2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80017e6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80017ea:	fa92 f2a2 	rbit	r2, r2
 80017ee:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80017f2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80017f6:	fab2 f282 	clz	r2, r2
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	f042 0220 	orr.w	r2, r2, #32
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	f002 021f 	and.w	r2, r2, #31
 8001806:	2101      	movs	r1, #1
 8001808:	fa01 f202 	lsl.w	r2, r1, r2
 800180c:	4013      	ands	r3, r2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1ab      	bne.n	800176a <HAL_RCC_OscConfig+0x24e>
 8001812:	e002      	b.n	800181a <HAL_RCC_OscConfig+0x2fe>
 8001814:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	f000 816f 	beq.w	8001b08 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800182a:	4bd0      	ldr	r3, [pc, #832]	; (8001b6c <HAL_RCC_OscConfig+0x650>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f003 030c 	and.w	r3, r3, #12
 8001832:	2b00      	cmp	r3, #0
 8001834:	d00b      	beq.n	800184e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001836:	4bcd      	ldr	r3, [pc, #820]	; (8001b6c <HAL_RCC_OscConfig+0x650>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f003 030c 	and.w	r3, r3, #12
 800183e:	2b08      	cmp	r3, #8
 8001840:	d16c      	bne.n	800191c <HAL_RCC_OscConfig+0x400>
 8001842:	4bca      	ldr	r3, [pc, #808]	; (8001b6c <HAL_RCC_OscConfig+0x650>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d166      	bne.n	800191c <HAL_RCC_OscConfig+0x400>
 800184e:	2302      	movs	r3, #2
 8001850:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001854:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001858:	fa93 f3a3 	rbit	r3, r3
 800185c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001860:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001864:	fab3 f383 	clz	r3, r3
 8001868:	b2db      	uxtb	r3, r3
 800186a:	095b      	lsrs	r3, r3, #5
 800186c:	b2db      	uxtb	r3, r3
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b01      	cmp	r3, #1
 8001876:	d102      	bne.n	800187e <HAL_RCC_OscConfig+0x362>
 8001878:	4bbc      	ldr	r3, [pc, #752]	; (8001b6c <HAL_RCC_OscConfig+0x650>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	e013      	b.n	80018a6 <HAL_RCC_OscConfig+0x38a>
 800187e:	2302      	movs	r3, #2
 8001880:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001884:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001888:	fa93 f3a3 	rbit	r3, r3
 800188c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001890:	2302      	movs	r3, #2
 8001892:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001896:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800189a:	fa93 f3a3 	rbit	r3, r3
 800189e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80018a2:	4bb2      	ldr	r3, [pc, #712]	; (8001b6c <HAL_RCC_OscConfig+0x650>)
 80018a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a6:	2202      	movs	r2, #2
 80018a8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80018ac:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80018b0:	fa92 f2a2 	rbit	r2, r2
 80018b4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80018b8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80018bc:	fab2 f282 	clz	r2, r2
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	f042 0220 	orr.w	r2, r2, #32
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	f002 021f 	and.w	r2, r2, #31
 80018cc:	2101      	movs	r1, #1
 80018ce:	fa01 f202 	lsl.w	r2, r1, r2
 80018d2:	4013      	ands	r3, r2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d007      	beq.n	80018e8 <HAL_RCC_OscConfig+0x3cc>
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d002      	beq.n	80018e8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	f000 bd1b 	b.w	800231e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e8:	4ba0      	ldr	r3, [pc, #640]	; (8001b6c <HAL_RCC_OscConfig+0x650>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	21f8      	movs	r1, #248	; 0xf8
 80018f8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001900:	fa91 f1a1 	rbit	r1, r1
 8001904:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001908:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800190c:	fab1 f181 	clz	r1, r1
 8001910:	b2c9      	uxtb	r1, r1
 8001912:	408b      	lsls	r3, r1
 8001914:	4995      	ldr	r1, [pc, #596]	; (8001b6c <HAL_RCC_OscConfig+0x650>)
 8001916:	4313      	orrs	r3, r2
 8001918:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800191a:	e0f5      	b.n	8001b08 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 8085 	beq.w	8001a32 <HAL_RCC_OscConfig+0x516>
 8001928:	2301      	movs	r3, #1
 800192a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001932:	fa93 f3a3 	rbit	r3, r3
 8001936:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800193a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800193e:	fab3 f383 	clz	r3, r3
 8001942:	b2db      	uxtb	r3, r3
 8001944:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001948:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	461a      	mov	r2, r3
 8001950:	2301      	movs	r3, #1
 8001952:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001954:	f7ff f8a2 	bl	8000a9c <HAL_GetTick>
 8001958:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195c:	e00a      	b.n	8001974 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800195e:	f7ff f89d 	bl	8000a9c <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d902      	bls.n	8001974 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	f000 bcd5 	b.w	800231e <HAL_RCC_OscConfig+0xe02>
 8001974:	2302      	movs	r3, #2
 8001976:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800197e:	fa93 f3a3 	rbit	r3, r3
 8001982:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001986:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800198a:	fab3 f383 	clz	r3, r3
 800198e:	b2db      	uxtb	r3, r3
 8001990:	095b      	lsrs	r3, r3, #5
 8001992:	b2db      	uxtb	r3, r3
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b01      	cmp	r3, #1
 800199c:	d102      	bne.n	80019a4 <HAL_RCC_OscConfig+0x488>
 800199e:	4b73      	ldr	r3, [pc, #460]	; (8001b6c <HAL_RCC_OscConfig+0x650>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	e013      	b.n	80019cc <HAL_RCC_OscConfig+0x4b0>
 80019a4:	2302      	movs	r3, #2
 80019a6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019aa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80019ae:	fa93 f3a3 	rbit	r3, r3
 80019b2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80019b6:	2302      	movs	r3, #2
 80019b8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80019bc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80019c0:	fa93 f3a3 	rbit	r3, r3
 80019c4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80019c8:	4b68      	ldr	r3, [pc, #416]	; (8001b6c <HAL_RCC_OscConfig+0x650>)
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019cc:	2202      	movs	r2, #2
 80019ce:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80019d2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80019d6:	fa92 f2a2 	rbit	r2, r2
 80019da:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80019de:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80019e2:	fab2 f282 	clz	r2, r2
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	f042 0220 	orr.w	r2, r2, #32
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	f002 021f 	and.w	r2, r2, #31
 80019f2:	2101      	movs	r1, #1
 80019f4:	fa01 f202 	lsl.w	r2, r1, r2
 80019f8:	4013      	ands	r3, r2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0af      	beq.n	800195e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fe:	4b5b      	ldr	r3, [pc, #364]	; (8001b6c <HAL_RCC_OscConfig+0x650>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	21f8      	movs	r1, #248	; 0xf8
 8001a0e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a12:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001a16:	fa91 f1a1 	rbit	r1, r1
 8001a1a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001a1e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001a22:	fab1 f181 	clz	r1, r1
 8001a26:	b2c9      	uxtb	r1, r1
 8001a28:	408b      	lsls	r3, r1
 8001a2a:	4950      	ldr	r1, [pc, #320]	; (8001b6c <HAL_RCC_OscConfig+0x650>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	600b      	str	r3, [r1, #0]
 8001a30:	e06a      	b.n	8001b08 <HAL_RCC_OscConfig+0x5ec>
 8001a32:	2301      	movs	r3, #1
 8001a34:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a38:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001a3c:	fa93 f3a3 	rbit	r3, r3
 8001a40:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001a44:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a48:	fab3 f383 	clz	r3, r3
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a52:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	461a      	mov	r2, r3
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5e:	f7ff f81d 	bl	8000a9c <HAL_GetTick>
 8001a62:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a66:	e00a      	b.n	8001a7e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a68:	f7ff f818 	bl	8000a9c <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d902      	bls.n	8001a7e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	f000 bc50 	b.w	800231e <HAL_RCC_OscConfig+0xe02>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a84:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001a88:	fa93 f3a3 	rbit	r3, r3
 8001a8c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001a90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a94:	fab3 f383 	clz	r3, r3
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	095b      	lsrs	r3, r3, #5
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d102      	bne.n	8001aae <HAL_RCC_OscConfig+0x592>
 8001aa8:	4b30      	ldr	r3, [pc, #192]	; (8001b6c <HAL_RCC_OscConfig+0x650>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	e013      	b.n	8001ad6 <HAL_RCC_OscConfig+0x5ba>
 8001aae:	2302      	movs	r3, #2
 8001ab0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001ab8:	fa93 f3a3 	rbit	r3, r3
 8001abc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001ac6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001aca:	fa93 f3a3 	rbit	r3, r3
 8001ace:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001ad2:	4b26      	ldr	r3, [pc, #152]	; (8001b6c <HAL_RCC_OscConfig+0x650>)
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001adc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001ae0:	fa92 f2a2 	rbit	r2, r2
 8001ae4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001ae8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001aec:	fab2 f282 	clz	r2, r2
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	f042 0220 	orr.w	r2, r2, #32
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	f002 021f 	and.w	r2, r2, #31
 8001afc:	2101      	movs	r1, #1
 8001afe:	fa01 f202 	lsl.w	r2, r1, r2
 8001b02:	4013      	ands	r3, r2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1af      	bne.n	8001a68 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f000 80da 	beq.w	8001ccc <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d069      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x6da>
 8001b22:	2301      	movs	r3, #1
 8001b24:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b28:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001b2c:	fa93 f3a3 	rbit	r3, r3
 8001b30:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001b34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b38:	fab3 f383 	clz	r3, r3
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	461a      	mov	r2, r3
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <HAL_RCC_OscConfig+0x654>)
 8001b42:	4413      	add	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	461a      	mov	r2, r3
 8001b48:	2301      	movs	r3, #1
 8001b4a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b4c:	f7fe ffa6 	bl	8000a9c <HAL_GetTick>
 8001b50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b54:	e00e      	b.n	8001b74 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b56:	f7fe ffa1 	bl	8000a9c <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d906      	bls.n	8001b74 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e3d9      	b.n	800231e <HAL_RCC_OscConfig+0xe02>
 8001b6a:	bf00      	nop
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	10908120 	.word	0x10908120
 8001b74:	2302      	movs	r3, #2
 8001b76:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001b7e:	fa93 f3a3 	rbit	r3, r3
 8001b82:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001b86:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	fa93 f2a3 	rbit	r2, r3
 8001b98:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	fa93 f2a3 	rbit	r2, r3
 8001bb0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001bb4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb6:	4ba5      	ldr	r3, [pc, #660]	; (8001e4c <HAL_RCC_OscConfig+0x930>)
 8001bb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bba:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001bbe:	2102      	movs	r1, #2
 8001bc0:	6019      	str	r1, [r3, #0]
 8001bc2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	fa93 f1a3 	rbit	r1, r3
 8001bcc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001bd0:	6019      	str	r1, [r3, #0]
  return result;
 8001bd2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	fab3 f383 	clz	r3, r3
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	f003 031f 	and.w	r3, r3, #31
 8001be8:	2101      	movs	r1, #1
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
 8001bee:	4013      	ands	r3, r2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0b0      	beq.n	8001b56 <HAL_RCC_OscConfig+0x63a>
 8001bf4:	e06a      	b.n	8001ccc <HAL_RCC_OscConfig+0x7b0>
 8001bf6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	fa93 f2a3 	rbit	r2, r3
 8001c08:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c0c:	601a      	str	r2, [r3, #0]
  return result;
 8001c0e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c12:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c14:	fab3 f383 	clz	r3, r3
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	4b8c      	ldr	r3, [pc, #560]	; (8001e50 <HAL_RCC_OscConfig+0x934>)
 8001c1e:	4413      	add	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	461a      	mov	r2, r3
 8001c24:	2300      	movs	r3, #0
 8001c26:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c28:	f7fe ff38 	bl	8000a9c <HAL_GetTick>
 8001c2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c30:	e009      	b.n	8001c46 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c32:	f7fe ff33 	bl	8000a9c <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e36b      	b.n	800231e <HAL_RCC_OscConfig+0xe02>
 8001c46:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	fa93 f2a3 	rbit	r2, r3
 8001c58:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001c62:	2202      	movs	r2, #2
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	fa93 f2a3 	rbit	r2, r3
 8001c70:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	fa93 f2a3 	rbit	r2, r3
 8001c88:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c8c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c8e:	4b6f      	ldr	r3, [pc, #444]	; (8001e4c <HAL_RCC_OscConfig+0x930>)
 8001c90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c92:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001c96:	2102      	movs	r1, #2
 8001c98:	6019      	str	r1, [r3, #0]
 8001c9a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	fa93 f1a3 	rbit	r1, r3
 8001ca4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001ca8:	6019      	str	r1, [r3, #0]
  return result;
 8001caa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	fab3 f383 	clz	r3, r3
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	f003 031f 	and.w	r3, r3, #31
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1b2      	bne.n	8001c32 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ccc:	1d3b      	adds	r3, r7, #4
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0304 	and.w	r3, r3, #4
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f000 8158 	beq.w	8001f8c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ce2:	4b5a      	ldr	r3, [pc, #360]	; (8001e4c <HAL_RCC_OscConfig+0x930>)
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d112      	bne.n	8001d14 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cee:	4b57      	ldr	r3, [pc, #348]	; (8001e4c <HAL_RCC_OscConfig+0x930>)
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	4a56      	ldr	r2, [pc, #344]	; (8001e4c <HAL_RCC_OscConfig+0x930>)
 8001cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	61d3      	str	r3, [r2, #28]
 8001cfa:	4b54      	ldr	r3, [pc, #336]	; (8001e4c <HAL_RCC_OscConfig+0x930>)
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001d02:	f107 0308 	add.w	r3, r7, #8
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	f107 0308 	add.w	r3, r7, #8
 8001d0c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d14:	4b4f      	ldr	r3, [pc, #316]	; (8001e54 <HAL_RCC_OscConfig+0x938>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d11a      	bne.n	8001d56 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d20:	4b4c      	ldr	r3, [pc, #304]	; (8001e54 <HAL_RCC_OscConfig+0x938>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a4b      	ldr	r2, [pc, #300]	; (8001e54 <HAL_RCC_OscConfig+0x938>)
 8001d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d2a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d2c:	f7fe feb6 	bl	8000a9c <HAL_GetTick>
 8001d30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d34:	e009      	b.n	8001d4a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d36:	f7fe feb1 	bl	8000a9c <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b64      	cmp	r3, #100	; 0x64
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e2e9      	b.n	800231e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4a:	4b42      	ldr	r3, [pc, #264]	; (8001e54 <HAL_RCC_OscConfig+0x938>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0ef      	beq.n	8001d36 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d56:	1d3b      	adds	r3, r7, #4
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d106      	bne.n	8001d6e <HAL_RCC_OscConfig+0x852>
 8001d60:	4b3a      	ldr	r3, [pc, #232]	; (8001e4c <HAL_RCC_OscConfig+0x930>)
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	4a39      	ldr	r2, [pc, #228]	; (8001e4c <HAL_RCC_OscConfig+0x930>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	6213      	str	r3, [r2, #32]
 8001d6c:	e02f      	b.n	8001dce <HAL_RCC_OscConfig+0x8b2>
 8001d6e:	1d3b      	adds	r3, r7, #4
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10c      	bne.n	8001d92 <HAL_RCC_OscConfig+0x876>
 8001d78:	4b34      	ldr	r3, [pc, #208]	; (8001e4c <HAL_RCC_OscConfig+0x930>)
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	4a33      	ldr	r2, [pc, #204]	; (8001e4c <HAL_RCC_OscConfig+0x930>)
 8001d7e:	f023 0301 	bic.w	r3, r3, #1
 8001d82:	6213      	str	r3, [r2, #32]
 8001d84:	4b31      	ldr	r3, [pc, #196]	; (8001e4c <HAL_RCC_OscConfig+0x930>)
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	4a30      	ldr	r2, [pc, #192]	; (8001e4c <HAL_RCC_OscConfig+0x930>)
 8001d8a:	f023 0304 	bic.w	r3, r3, #4
 8001d8e:	6213      	str	r3, [r2, #32]
 8001d90:	e01d      	b.n	8001dce <HAL_RCC_OscConfig+0x8b2>
 8001d92:	1d3b      	adds	r3, r7, #4
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	2b05      	cmp	r3, #5
 8001d9a:	d10c      	bne.n	8001db6 <HAL_RCC_OscConfig+0x89a>
 8001d9c:	4b2b      	ldr	r3, [pc, #172]	; (8001e4c <HAL_RCC_OscConfig+0x930>)
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	4a2a      	ldr	r2, [pc, #168]	; (8001e4c <HAL_RCC_OscConfig+0x930>)
 8001da2:	f043 0304 	orr.w	r3, r3, #4
 8001da6:	6213      	str	r3, [r2, #32]
 8001da8:	4b28      	ldr	r3, [pc, #160]	; (8001e4c <HAL_RCC_OscConfig+0x930>)
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	4a27      	ldr	r2, [pc, #156]	; (8001e4c <HAL_RCC_OscConfig+0x930>)
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	6213      	str	r3, [r2, #32]
 8001db4:	e00b      	b.n	8001dce <HAL_RCC_OscConfig+0x8b2>
 8001db6:	4b25      	ldr	r3, [pc, #148]	; (8001e4c <HAL_RCC_OscConfig+0x930>)
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	4a24      	ldr	r2, [pc, #144]	; (8001e4c <HAL_RCC_OscConfig+0x930>)
 8001dbc:	f023 0301 	bic.w	r3, r3, #1
 8001dc0:	6213      	str	r3, [r2, #32]
 8001dc2:	4b22      	ldr	r3, [pc, #136]	; (8001e4c <HAL_RCC_OscConfig+0x930>)
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	4a21      	ldr	r2, [pc, #132]	; (8001e4c <HAL_RCC_OscConfig+0x930>)
 8001dc8:	f023 0304 	bic.w	r3, r3, #4
 8001dcc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d06b      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd8:	f7fe fe60 	bl	8000a9c <HAL_GetTick>
 8001ddc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de0:	e00b      	b.n	8001dfa <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001de2:	f7fe fe5b 	bl	8000a9c <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e291      	b.n	800231e <HAL_RCC_OscConfig+0xe02>
 8001dfa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001dfe:	2202      	movs	r2, #2
 8001e00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e02:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	fa93 f2a3 	rbit	r2, r3
 8001e0c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001e16:	2202      	movs	r2, #2
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	fa93 f2a3 	rbit	r2, r3
 8001e24:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001e28:	601a      	str	r2, [r3, #0]
  return result;
 8001e2a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001e2e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e30:	fab3 f383 	clz	r3, r3
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	095b      	lsrs	r3, r3, #5
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	f043 0302 	orr.w	r3, r3, #2
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d109      	bne.n	8001e58 <HAL_RCC_OscConfig+0x93c>
 8001e44:	4b01      	ldr	r3, [pc, #4]	; (8001e4c <HAL_RCC_OscConfig+0x930>)
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	e014      	b.n	8001e74 <HAL_RCC_OscConfig+0x958>
 8001e4a:	bf00      	nop
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	10908120 	.word	0x10908120
 8001e54:	40007000 	.word	0x40007000
 8001e58:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e60:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	fa93 f2a3 	rbit	r2, r3
 8001e6a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	4bbb      	ldr	r3, [pc, #748]	; (8002160 <HAL_RCC_OscConfig+0xc44>)
 8001e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e74:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001e78:	2102      	movs	r1, #2
 8001e7a:	6011      	str	r1, [r2, #0]
 8001e7c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001e80:	6812      	ldr	r2, [r2, #0]
 8001e82:	fa92 f1a2 	rbit	r1, r2
 8001e86:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001e8a:	6011      	str	r1, [r2, #0]
  return result;
 8001e8c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001e90:	6812      	ldr	r2, [r2, #0]
 8001e92:	fab2 f282 	clz	r2, r2
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	f002 021f 	and.w	r2, r2, #31
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d099      	beq.n	8001de2 <HAL_RCC_OscConfig+0x8c6>
 8001eae:	e063      	b.n	8001f78 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb0:	f7fe fdf4 	bl	8000a9c <HAL_GetTick>
 8001eb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb8:	e00b      	b.n	8001ed2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eba:	f7fe fdef 	bl	8000a9c <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e225      	b.n	800231e <HAL_RCC_OscConfig+0xe02>
 8001ed2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eda:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	fa93 f2a3 	rbit	r2, r3
 8001ee4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001eee:	2202      	movs	r2, #2
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	fa93 f2a3 	rbit	r2, r3
 8001efc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f00:	601a      	str	r2, [r3, #0]
  return result;
 8001f02:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f06:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f08:	fab3 f383 	clz	r3, r3
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	095b      	lsrs	r3, r3, #5
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	f043 0302 	orr.w	r3, r3, #2
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d102      	bne.n	8001f22 <HAL_RCC_OscConfig+0xa06>
 8001f1c:	4b90      	ldr	r3, [pc, #576]	; (8002160 <HAL_RCC_OscConfig+0xc44>)
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	e00d      	b.n	8001f3e <HAL_RCC_OscConfig+0xa22>
 8001f22:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001f26:	2202      	movs	r2, #2
 8001f28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	fa93 f2a3 	rbit	r2, r3
 8001f34:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	4b89      	ldr	r3, [pc, #548]	; (8002160 <HAL_RCC_OscConfig+0xc44>)
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001f42:	2102      	movs	r1, #2
 8001f44:	6011      	str	r1, [r2, #0]
 8001f46:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	fa92 f1a2 	rbit	r1, r2
 8001f50:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001f54:	6011      	str	r1, [r2, #0]
  return result;
 8001f56:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	fab2 f282 	clz	r2, r2
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	f002 021f 	and.w	r2, r2, #31
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1a0      	bne.n	8001eba <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f78:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d105      	bne.n	8001f8c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f80:	4b77      	ldr	r3, [pc, #476]	; (8002160 <HAL_RCC_OscConfig+0xc44>)
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	4a76      	ldr	r2, [pc, #472]	; (8002160 <HAL_RCC_OscConfig+0xc44>)
 8001f86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f8a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f8c:	1d3b      	adds	r3, r7, #4
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 81c2 	beq.w	800231c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f98:	4b71      	ldr	r3, [pc, #452]	; (8002160 <HAL_RCC_OscConfig+0xc44>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 030c 	and.w	r3, r3, #12
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	f000 819c 	beq.w	80022de <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fa6:	1d3b      	adds	r3, r7, #4
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	f040 8114 	bne.w	80021da <HAL_RCC_OscConfig+0xcbe>
 8001fb2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001fb6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001fba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	fa93 f2a3 	rbit	r2, r3
 8001fc6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001fca:	601a      	str	r2, [r3, #0]
  return result;
 8001fcc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001fd0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd2:	fab3 f383 	clz	r3, r3
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fdc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe8:	f7fe fd58 	bl	8000a9c <HAL_GetTick>
 8001fec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff0:	e009      	b.n	8002006 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff2:	f7fe fd53 	bl	8000a9c <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e18b      	b.n	800231e <HAL_RCC_OscConfig+0xe02>
 8002006:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800200a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800200e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002010:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	fa93 f2a3 	rbit	r2, r3
 800201a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800201e:	601a      	str	r2, [r3, #0]
  return result;
 8002020:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002024:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002026:	fab3 f383 	clz	r3, r3
 800202a:	b2db      	uxtb	r3, r3
 800202c:	095b      	lsrs	r3, r3, #5
 800202e:	b2db      	uxtb	r3, r3
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b01      	cmp	r3, #1
 8002038:	d102      	bne.n	8002040 <HAL_RCC_OscConfig+0xb24>
 800203a:	4b49      	ldr	r3, [pc, #292]	; (8002160 <HAL_RCC_OscConfig+0xc44>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	e01b      	b.n	8002078 <HAL_RCC_OscConfig+0xb5c>
 8002040:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002044:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002048:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	fa93 f2a3 	rbit	r2, r3
 8002054:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800205e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	fa93 f2a3 	rbit	r2, r3
 800206e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	4b3a      	ldr	r3, [pc, #232]	; (8002160 <HAL_RCC_OscConfig+0xc44>)
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800207c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002080:	6011      	str	r1, [r2, #0]
 8002082:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002086:	6812      	ldr	r2, [r2, #0]
 8002088:	fa92 f1a2 	rbit	r1, r2
 800208c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002090:	6011      	str	r1, [r2, #0]
  return result;
 8002092:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002096:	6812      	ldr	r2, [r2, #0]
 8002098:	fab2 f282 	clz	r2, r2
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	f042 0220 	orr.w	r2, r2, #32
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	f002 021f 	and.w	r2, r2, #31
 80020a8:	2101      	movs	r1, #1
 80020aa:	fa01 f202 	lsl.w	r2, r1, r2
 80020ae:	4013      	ands	r3, r2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d19e      	bne.n	8001ff2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020b4:	4b2a      	ldr	r3, [pc, #168]	; (8002160 <HAL_RCC_OscConfig+0xc44>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020bc:	1d3b      	adds	r3, r7, #4
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80020c2:	1d3b      	adds	r3, r7, #4
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	430b      	orrs	r3, r1
 80020ca:	4925      	ldr	r1, [pc, #148]	; (8002160 <HAL_RCC_OscConfig+0xc44>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]
 80020d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	fa93 f2a3 	rbit	r2, r3
 80020e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020e8:	601a      	str	r2, [r3, #0]
  return result;
 80020ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020ee:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020f0:	fab3 f383 	clz	r3, r3
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020fa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	461a      	mov	r2, r3
 8002102:	2301      	movs	r3, #1
 8002104:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002106:	f7fe fcc9 	bl	8000a9c <HAL_GetTick>
 800210a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800210e:	e009      	b.n	8002124 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002110:	f7fe fcc4 	bl	8000a9c <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e0fc      	b.n	800231e <HAL_RCC_OscConfig+0xe02>
 8002124:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002128:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800212c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	fa93 f2a3 	rbit	r2, r3
 8002138:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800213c:	601a      	str	r2, [r3, #0]
  return result;
 800213e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002142:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002144:	fab3 f383 	clz	r3, r3
 8002148:	b2db      	uxtb	r3, r3
 800214a:	095b      	lsrs	r3, r3, #5
 800214c:	b2db      	uxtb	r3, r3
 800214e:	f043 0301 	orr.w	r3, r3, #1
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b01      	cmp	r3, #1
 8002156:	d105      	bne.n	8002164 <HAL_RCC_OscConfig+0xc48>
 8002158:	4b01      	ldr	r3, [pc, #4]	; (8002160 <HAL_RCC_OscConfig+0xc44>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	e01e      	b.n	800219c <HAL_RCC_OscConfig+0xc80>
 800215e:	bf00      	nop
 8002160:	40021000 	.word	0x40021000
 8002164:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002168:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800216c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	fa93 f2a3 	rbit	r2, r3
 8002178:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002182:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	fa93 f2a3 	rbit	r2, r3
 8002192:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	4b63      	ldr	r3, [pc, #396]	; (8002328 <HAL_RCC_OscConfig+0xe0c>)
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80021a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021a4:	6011      	str	r1, [r2, #0]
 80021a6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80021aa:	6812      	ldr	r2, [r2, #0]
 80021ac:	fa92 f1a2 	rbit	r1, r2
 80021b0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80021b4:	6011      	str	r1, [r2, #0]
  return result;
 80021b6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80021ba:	6812      	ldr	r2, [r2, #0]
 80021bc:	fab2 f282 	clz	r2, r2
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	f042 0220 	orr.w	r2, r2, #32
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	f002 021f 	and.w	r2, r2, #31
 80021cc:	2101      	movs	r1, #1
 80021ce:	fa01 f202 	lsl.w	r2, r1, r2
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d09b      	beq.n	8002110 <HAL_RCC_OscConfig+0xbf4>
 80021d8:	e0a0      	b.n	800231c <HAL_RCC_OscConfig+0xe00>
 80021da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	fa93 f2a3 	rbit	r2, r3
 80021ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021f2:	601a      	str	r2, [r3, #0]
  return result;
 80021f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021f8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021fa:	fab3 f383 	clz	r3, r3
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002204:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	461a      	mov	r2, r3
 800220c:	2300      	movs	r3, #0
 800220e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002210:	f7fe fc44 	bl	8000a9c <HAL_GetTick>
 8002214:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002218:	e009      	b.n	800222e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800221a:	f7fe fc3f 	bl	8000a9c <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e077      	b.n	800231e <HAL_RCC_OscConfig+0xe02>
 800222e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002232:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002236:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002238:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	fa93 f2a3 	rbit	r2, r3
 8002242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002246:	601a      	str	r2, [r3, #0]
  return result;
 8002248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800224c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800224e:	fab3 f383 	clz	r3, r3
 8002252:	b2db      	uxtb	r3, r3
 8002254:	095b      	lsrs	r3, r3, #5
 8002256:	b2db      	uxtb	r3, r3
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b01      	cmp	r3, #1
 8002260:	d102      	bne.n	8002268 <HAL_RCC_OscConfig+0xd4c>
 8002262:	4b31      	ldr	r3, [pc, #196]	; (8002328 <HAL_RCC_OscConfig+0xe0c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	e01b      	b.n	80022a0 <HAL_RCC_OscConfig+0xd84>
 8002268:	f107 0320 	add.w	r3, r7, #32
 800226c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002270:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	f107 0320 	add.w	r3, r7, #32
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	fa93 f2a3 	rbit	r2, r3
 800227c:	f107 031c 	add.w	r3, r7, #28
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	f107 0318 	add.w	r3, r7, #24
 8002286:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	f107 0318 	add.w	r3, r7, #24
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	fa93 f2a3 	rbit	r2, r3
 8002296:	f107 0314 	add.w	r3, r7, #20
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	4b22      	ldr	r3, [pc, #136]	; (8002328 <HAL_RCC_OscConfig+0xe0c>)
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	f107 0210 	add.w	r2, r7, #16
 80022a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022a8:	6011      	str	r1, [r2, #0]
 80022aa:	f107 0210 	add.w	r2, r7, #16
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	fa92 f1a2 	rbit	r1, r2
 80022b4:	f107 020c 	add.w	r2, r7, #12
 80022b8:	6011      	str	r1, [r2, #0]
  return result;
 80022ba:	f107 020c 	add.w	r2, r7, #12
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	fab2 f282 	clz	r2, r2
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	f042 0220 	orr.w	r2, r2, #32
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	f002 021f 	and.w	r2, r2, #31
 80022d0:	2101      	movs	r1, #1
 80022d2:	fa01 f202 	lsl.w	r2, r1, r2
 80022d6:	4013      	ands	r3, r2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d19e      	bne.n	800221a <HAL_RCC_OscConfig+0xcfe>
 80022dc:	e01e      	b.n	800231c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022de:	1d3b      	adds	r3, r7, #4
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	69db      	ldr	r3, [r3, #28]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e018      	b.n	800231e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022ec:	4b0e      	ldr	r3, [pc, #56]	; (8002328 <HAL_RCC_OscConfig+0xe0c>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80022f4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80022f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022fc:	1d3b      	adds	r3, r7, #4
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	429a      	cmp	r2, r3
 8002304:	d108      	bne.n	8002318 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002306:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800230a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800230e:	1d3b      	adds	r3, r7, #4
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002314:	429a      	cmp	r2, r3
 8002316:	d001      	beq.n	800231c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e000      	b.n	800231e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40021000 	.word	0x40021000

0800232c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b09e      	sub	sp, #120	; 0x78
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002336:	2300      	movs	r3, #0
 8002338:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e162      	b.n	800260a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002344:	4b90      	ldr	r3, [pc, #576]	; (8002588 <HAL_RCC_ClockConfig+0x25c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	429a      	cmp	r2, r3
 8002350:	d910      	bls.n	8002374 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002352:	4b8d      	ldr	r3, [pc, #564]	; (8002588 <HAL_RCC_ClockConfig+0x25c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f023 0207 	bic.w	r2, r3, #7
 800235a:	498b      	ldr	r1, [pc, #556]	; (8002588 <HAL_RCC_ClockConfig+0x25c>)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	4313      	orrs	r3, r2
 8002360:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002362:	4b89      	ldr	r3, [pc, #548]	; (8002588 <HAL_RCC_ClockConfig+0x25c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	429a      	cmp	r2, r3
 800236e:	d001      	beq.n	8002374 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e14a      	b.n	800260a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d008      	beq.n	8002392 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002380:	4b82      	ldr	r3, [pc, #520]	; (800258c <HAL_RCC_ClockConfig+0x260>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	497f      	ldr	r1, [pc, #508]	; (800258c <HAL_RCC_ClockConfig+0x260>)
 800238e:	4313      	orrs	r3, r2
 8002390:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	f000 80dc 	beq.w	8002558 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d13c      	bne.n	8002422 <HAL_RCC_ClockConfig+0xf6>
 80023a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023ac:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023b0:	fa93 f3a3 	rbit	r3, r3
 80023b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80023b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b8:	fab3 f383 	clz	r3, r3
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	095b      	lsrs	r3, r3, #5
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d102      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xa6>
 80023cc:	4b6f      	ldr	r3, [pc, #444]	; (800258c <HAL_RCC_ClockConfig+0x260>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	e00f      	b.n	80023f2 <HAL_RCC_ClockConfig+0xc6>
 80023d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023da:	fa93 f3a3 	rbit	r3, r3
 80023de:	667b      	str	r3, [r7, #100]	; 0x64
 80023e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023e4:	663b      	str	r3, [r7, #96]	; 0x60
 80023e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023e8:	fa93 f3a3 	rbit	r3, r3
 80023ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023ee:	4b67      	ldr	r3, [pc, #412]	; (800258c <HAL_RCC_ClockConfig+0x260>)
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80023f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023fa:	fa92 f2a2 	rbit	r2, r2
 80023fe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002400:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002402:	fab2 f282 	clz	r2, r2
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	f042 0220 	orr.w	r2, r2, #32
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	f002 021f 	and.w	r2, r2, #31
 8002412:	2101      	movs	r1, #1
 8002414:	fa01 f202 	lsl.w	r2, r1, r2
 8002418:	4013      	ands	r3, r2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d17b      	bne.n	8002516 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e0f3      	b.n	800260a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b02      	cmp	r3, #2
 8002428:	d13c      	bne.n	80024a4 <HAL_RCC_ClockConfig+0x178>
 800242a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800242e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002430:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002432:	fa93 f3a3 	rbit	r3, r3
 8002436:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800243a:	fab3 f383 	clz	r3, r3
 800243e:	b2db      	uxtb	r3, r3
 8002440:	095b      	lsrs	r3, r3, #5
 8002442:	b2db      	uxtb	r3, r3
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b01      	cmp	r3, #1
 800244c:	d102      	bne.n	8002454 <HAL_RCC_ClockConfig+0x128>
 800244e:	4b4f      	ldr	r3, [pc, #316]	; (800258c <HAL_RCC_ClockConfig+0x260>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	e00f      	b.n	8002474 <HAL_RCC_ClockConfig+0x148>
 8002454:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002458:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800245c:	fa93 f3a3 	rbit	r3, r3
 8002460:	647b      	str	r3, [r7, #68]	; 0x44
 8002462:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002466:	643b      	str	r3, [r7, #64]	; 0x40
 8002468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800246a:	fa93 f3a3 	rbit	r3, r3
 800246e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002470:	4b46      	ldr	r3, [pc, #280]	; (800258c <HAL_RCC_ClockConfig+0x260>)
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002478:	63ba      	str	r2, [r7, #56]	; 0x38
 800247a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800247c:	fa92 f2a2 	rbit	r2, r2
 8002480:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002482:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002484:	fab2 f282 	clz	r2, r2
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	f042 0220 	orr.w	r2, r2, #32
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	f002 021f 	and.w	r2, r2, #31
 8002494:	2101      	movs	r1, #1
 8002496:	fa01 f202 	lsl.w	r2, r1, r2
 800249a:	4013      	ands	r3, r2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d13a      	bne.n	8002516 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e0b2      	b.n	800260a <HAL_RCC_ClockConfig+0x2de>
 80024a4:	2302      	movs	r3, #2
 80024a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024aa:	fa93 f3a3 	rbit	r3, r3
 80024ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80024b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b2:	fab3 f383 	clz	r3, r3
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	095b      	lsrs	r3, r3, #5
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d102      	bne.n	80024cc <HAL_RCC_ClockConfig+0x1a0>
 80024c6:	4b31      	ldr	r3, [pc, #196]	; (800258c <HAL_RCC_ClockConfig+0x260>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	e00d      	b.n	80024e8 <HAL_RCC_ClockConfig+0x1bc>
 80024cc:	2302      	movs	r3, #2
 80024ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d2:	fa93 f3a3 	rbit	r3, r3
 80024d6:	627b      	str	r3, [r7, #36]	; 0x24
 80024d8:	2302      	movs	r3, #2
 80024da:	623b      	str	r3, [r7, #32]
 80024dc:	6a3b      	ldr	r3, [r7, #32]
 80024de:	fa93 f3a3 	rbit	r3, r3
 80024e2:	61fb      	str	r3, [r7, #28]
 80024e4:	4b29      	ldr	r3, [pc, #164]	; (800258c <HAL_RCC_ClockConfig+0x260>)
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	2202      	movs	r2, #2
 80024ea:	61ba      	str	r2, [r7, #24]
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	fa92 f2a2 	rbit	r2, r2
 80024f2:	617a      	str	r2, [r7, #20]
  return result;
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	fab2 f282 	clz	r2, r2
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	f042 0220 	orr.w	r2, r2, #32
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	f002 021f 	and.w	r2, r2, #31
 8002506:	2101      	movs	r1, #1
 8002508:	fa01 f202 	lsl.w	r2, r1, r2
 800250c:	4013      	ands	r3, r2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e079      	b.n	800260a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002516:	4b1d      	ldr	r3, [pc, #116]	; (800258c <HAL_RCC_ClockConfig+0x260>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f023 0203 	bic.w	r2, r3, #3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	491a      	ldr	r1, [pc, #104]	; (800258c <HAL_RCC_ClockConfig+0x260>)
 8002524:	4313      	orrs	r3, r2
 8002526:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002528:	f7fe fab8 	bl	8000a9c <HAL_GetTick>
 800252c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252e:	e00a      	b.n	8002546 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002530:	f7fe fab4 	bl	8000a9c <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	f241 3288 	movw	r2, #5000	; 0x1388
 800253e:	4293      	cmp	r3, r2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e061      	b.n	800260a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002546:	4b11      	ldr	r3, [pc, #68]	; (800258c <HAL_RCC_ClockConfig+0x260>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 020c 	and.w	r2, r3, #12
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	429a      	cmp	r2, r3
 8002556:	d1eb      	bne.n	8002530 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002558:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <HAL_RCC_ClockConfig+0x25c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d214      	bcs.n	8002590 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002566:	4b08      	ldr	r3, [pc, #32]	; (8002588 <HAL_RCC_ClockConfig+0x25c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f023 0207 	bic.w	r2, r3, #7
 800256e:	4906      	ldr	r1, [pc, #24]	; (8002588 <HAL_RCC_ClockConfig+0x25c>)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	4313      	orrs	r3, r2
 8002574:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002576:	4b04      	ldr	r3, [pc, #16]	; (8002588 <HAL_RCC_ClockConfig+0x25c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	d005      	beq.n	8002590 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e040      	b.n	800260a <HAL_RCC_ClockConfig+0x2de>
 8002588:	40022000 	.word	0x40022000
 800258c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800259c:	4b1d      	ldr	r3, [pc, #116]	; (8002614 <HAL_RCC_ClockConfig+0x2e8>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	491a      	ldr	r1, [pc, #104]	; (8002614 <HAL_RCC_ClockConfig+0x2e8>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d009      	beq.n	80025ce <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025ba:	4b16      	ldr	r3, [pc, #88]	; (8002614 <HAL_RCC_ClockConfig+0x2e8>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	4912      	ldr	r1, [pc, #72]	; (8002614 <HAL_RCC_ClockConfig+0x2e8>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80025ce:	f000 f829 	bl	8002624 <HAL_RCC_GetSysClockFreq>
 80025d2:	4601      	mov	r1, r0
 80025d4:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <HAL_RCC_ClockConfig+0x2e8>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025dc:	22f0      	movs	r2, #240	; 0xf0
 80025de:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	fa92 f2a2 	rbit	r2, r2
 80025e6:	60fa      	str	r2, [r7, #12]
  return result;
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	fab2 f282 	clz	r2, r2
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	40d3      	lsrs	r3, r2
 80025f2:	4a09      	ldr	r2, [pc, #36]	; (8002618 <HAL_RCC_ClockConfig+0x2ec>)
 80025f4:	5cd3      	ldrb	r3, [r2, r3]
 80025f6:	fa21 f303 	lsr.w	r3, r1, r3
 80025fa:	4a08      	ldr	r2, [pc, #32]	; (800261c <HAL_RCC_ClockConfig+0x2f0>)
 80025fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80025fe:	4b08      	ldr	r3, [pc, #32]	; (8002620 <HAL_RCC_ClockConfig+0x2f4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7fe fa06 	bl	8000a14 <HAL_InitTick>
  
  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3778      	adds	r7, #120	; 0x78
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40021000 	.word	0x40021000
 8002618:	08003d58 	.word	0x08003d58
 800261c:	20000020 	.word	0x20000020
 8002620:	20000024 	.word	0x20000024

08002624 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002624:	b480      	push	{r7}
 8002626:	b08b      	sub	sp, #44	; 0x2c
 8002628:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	61fb      	str	r3, [r7, #28]
 800262e:	2300      	movs	r3, #0
 8002630:	61bb      	str	r3, [r7, #24]
 8002632:	2300      	movs	r3, #0
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800263a:	2300      	movs	r3, #0
 800263c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800263e:	4b29      	ldr	r3, [pc, #164]	; (80026e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f003 030c 	and.w	r3, r3, #12
 800264a:	2b04      	cmp	r3, #4
 800264c:	d002      	beq.n	8002654 <HAL_RCC_GetSysClockFreq+0x30>
 800264e:	2b08      	cmp	r3, #8
 8002650:	d003      	beq.n	800265a <HAL_RCC_GetSysClockFreq+0x36>
 8002652:	e03c      	b.n	80026ce <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002654:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002656:	623b      	str	r3, [r7, #32]
      break;
 8002658:	e03c      	b.n	80026d4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002660:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002664:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	fa92 f2a2 	rbit	r2, r2
 800266c:	607a      	str	r2, [r7, #4]
  return result;
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	fab2 f282 	clz	r2, r2
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	40d3      	lsrs	r3, r2
 8002678:	4a1c      	ldr	r2, [pc, #112]	; (80026ec <HAL_RCC_GetSysClockFreq+0xc8>)
 800267a:	5cd3      	ldrb	r3, [r2, r3]
 800267c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800267e:	4b19      	ldr	r3, [pc, #100]	; (80026e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	220f      	movs	r2, #15
 8002688:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	fa92 f2a2 	rbit	r2, r2
 8002690:	60fa      	str	r2, [r7, #12]
  return result;
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	fab2 f282 	clz	r2, r2
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	40d3      	lsrs	r3, r2
 800269c:	4a14      	ldr	r2, [pc, #80]	; (80026f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800269e:	5cd3      	ldrb	r3, [r2, r3]
 80026a0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d008      	beq.n	80026be <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026ac:	4a0e      	ldr	r2, [pc, #56]	; (80026e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	fb02 f303 	mul.w	r3, r2, r3
 80026ba:	627b      	str	r3, [r7, #36]	; 0x24
 80026bc:	e004      	b.n	80026c8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	4a0c      	ldr	r2, [pc, #48]	; (80026f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80026c2:	fb02 f303 	mul.w	r3, r2, r3
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	623b      	str	r3, [r7, #32]
      break;
 80026cc:	e002      	b.n	80026d4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80026d0:	623b      	str	r3, [r7, #32]
      break;
 80026d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026d4:	6a3b      	ldr	r3, [r7, #32]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	372c      	adds	r7, #44	; 0x2c
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	40021000 	.word	0x40021000
 80026e8:	007a1200 	.word	0x007a1200
 80026ec:	08003d70 	.word	0x08003d70
 80026f0:	08003d80 	.word	0x08003d80
 80026f4:	003d0900 	.word	0x003d0900

080026f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026fc:	4b03      	ldr	r3, [pc, #12]	; (800270c <HAL_RCC_GetHCLKFreq+0x14>)
 80026fe:	681b      	ldr	r3, [r3, #0]
}
 8002700:	4618      	mov	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	20000020 	.word	0x20000020

08002710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002716:	f7ff ffef 	bl	80026f8 <HAL_RCC_GetHCLKFreq>
 800271a:	4601      	mov	r1, r0
 800271c:	4b0b      	ldr	r3, [pc, #44]	; (800274c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002724:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002728:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	fa92 f2a2 	rbit	r2, r2
 8002730:	603a      	str	r2, [r7, #0]
  return result;
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	fab2 f282 	clz	r2, r2
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	40d3      	lsrs	r3, r2
 800273c:	4a04      	ldr	r2, [pc, #16]	; (8002750 <HAL_RCC_GetPCLK1Freq+0x40>)
 800273e:	5cd3      	ldrb	r3, [r2, r3]
 8002740:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002744:	4618      	mov	r0, r3
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40021000 	.word	0x40021000
 8002750:	08003d68 	.word	0x08003d68

08002754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800275a:	f7ff ffcd 	bl	80026f8 <HAL_RCC_GetHCLKFreq>
 800275e:	4601      	mov	r1, r0
 8002760:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002768:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800276c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	fa92 f2a2 	rbit	r2, r2
 8002774:	603a      	str	r2, [r7, #0]
  return result;
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	fab2 f282 	clz	r2, r2
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	40d3      	lsrs	r3, r2
 8002780:	4a04      	ldr	r2, [pc, #16]	; (8002794 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002782:	5cd3      	ldrb	r3, [r2, r3]
 8002784:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002788:	4618      	mov	r0, r3
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40021000 	.word	0x40021000
 8002794:	08003d68 	.word	0x08003d68

08002798 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b092      	sub	sp, #72	; 0x48
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80027a8:	2300      	movs	r3, #0
 80027aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 80d4 	beq.w	8002964 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027bc:	4b4e      	ldr	r3, [pc, #312]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10e      	bne.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c8:	4b4b      	ldr	r3, [pc, #300]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	4a4a      	ldr	r2, [pc, #296]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d2:	61d3      	str	r3, [r2, #28]
 80027d4:	4b48      	ldr	r3, [pc, #288]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027e0:	2301      	movs	r3, #1
 80027e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e6:	4b45      	ldr	r3, [pc, #276]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d118      	bne.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027f2:	4b42      	ldr	r3, [pc, #264]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a41      	ldr	r2, [pc, #260]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027fc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027fe:	f7fe f94d 	bl	8000a9c <HAL_GetTick>
 8002802:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002804:	e008      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002806:	f7fe f949 	bl	8000a9c <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b64      	cmp	r3, #100	; 0x64
 8002812:	d901      	bls.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e169      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002818:	4b38      	ldr	r3, [pc, #224]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0f0      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002824:	4b34      	ldr	r3, [pc, #208]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800282c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800282e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 8084 	beq.w	800293e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800283e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002840:	429a      	cmp	r2, r3
 8002842:	d07c      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002844:	4b2c      	ldr	r3, [pc, #176]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800284c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800284e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002852:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800285c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800285e:	fab3 f383 	clz	r3, r3
 8002862:	b2db      	uxtb	r3, r3
 8002864:	461a      	mov	r2, r3
 8002866:	4b26      	ldr	r3, [pc, #152]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002868:	4413      	add	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	461a      	mov	r2, r3
 800286e:	2301      	movs	r3, #1
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002876:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800287a:	fa93 f3a3 	rbit	r3, r3
 800287e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002882:	fab3 f383 	clz	r3, r3
 8002886:	b2db      	uxtb	r3, r3
 8002888:	461a      	mov	r2, r3
 800288a:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800288c:	4413      	add	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	461a      	mov	r2, r3
 8002892:	2300      	movs	r3, #0
 8002894:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002896:	4a18      	ldr	r2, [pc, #96]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800289a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800289c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d04b      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a6:	f7fe f8f9 	bl	8000a9c <HAL_GetTick>
 80028aa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ac:	e00a      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ae:	f7fe f8f5 	bl	8000a9c <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028bc:	4293      	cmp	r3, r2
 80028be:	d901      	bls.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e113      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x354>
 80028c4:	2302      	movs	r3, #2
 80028c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ca:	fa93 f3a3 	rbit	r3, r3
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24
 80028d0:	2302      	movs	r3, #2
 80028d2:	623b      	str	r3, [r7, #32]
 80028d4:	6a3b      	ldr	r3, [r7, #32]
 80028d6:	fa93 f3a3 	rbit	r3, r3
 80028da:	61fb      	str	r3, [r7, #28]
  return result;
 80028dc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028de:	fab3 f383 	clz	r3, r3
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	095b      	lsrs	r3, r3, #5
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	f043 0302 	orr.w	r3, r3, #2
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d108      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80028f2:	4b01      	ldr	r3, [pc, #4]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	e00d      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80028f8:	40021000 	.word	0x40021000
 80028fc:	40007000 	.word	0x40007000
 8002900:	10908100 	.word	0x10908100
 8002904:	2302      	movs	r3, #2
 8002906:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	fa93 f3a3 	rbit	r3, r3
 800290e:	617b      	str	r3, [r7, #20]
 8002910:	4b78      	ldr	r3, [pc, #480]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	2202      	movs	r2, #2
 8002916:	613a      	str	r2, [r7, #16]
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	fa92 f2a2 	rbit	r2, r2
 800291e:	60fa      	str	r2, [r7, #12]
  return result;
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	fab2 f282 	clz	r2, r2
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	f002 021f 	and.w	r2, r2, #31
 8002932:	2101      	movs	r1, #1
 8002934:	fa01 f202 	lsl.w	r2, r1, r2
 8002938:	4013      	ands	r3, r2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0b7      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800293e:	4b6d      	ldr	r3, [pc, #436]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	496a      	ldr	r1, [pc, #424]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800294c:	4313      	orrs	r3, r2
 800294e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002950:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002954:	2b01      	cmp	r3, #1
 8002956:	d105      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002958:	4b66      	ldr	r3, [pc, #408]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	4a65      	ldr	r2, [pc, #404]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800295e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002962:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b00      	cmp	r3, #0
 800296e:	d008      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002970:	4b60      	ldr	r3, [pc, #384]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002974:	f023 0203 	bic.w	r2, r3, #3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	495d      	ldr	r1, [pc, #372]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800297e:	4313      	orrs	r3, r2
 8002980:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d008      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800298e:	4b59      	ldr	r3, [pc, #356]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	4956      	ldr	r1, [pc, #344]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800299c:	4313      	orrs	r3, r2
 800299e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d008      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029ac:	4b51      	ldr	r3, [pc, #324]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	494e      	ldr	r1, [pc, #312]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0320 	and.w	r3, r3, #32
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d008      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029ca:	4b4a      	ldr	r3, [pc, #296]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	f023 0210 	bic.w	r2, r3, #16
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	4947      	ldr	r1, [pc, #284]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d008      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80029e8:	4b42      	ldr	r3, [pc, #264]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f4:	493f      	ldr	r1, [pc, #252]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d008      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a06:	4b3b      	ldr	r3, [pc, #236]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	f023 0220 	bic.w	r2, r3, #32
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	4938      	ldr	r1, [pc, #224]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0308 	and.w	r3, r3, #8
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d008      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a24:	4b33      	ldr	r3, [pc, #204]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	4930      	ldr	r1, [pc, #192]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0310 	and.w	r3, r3, #16
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d008      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a42:	4b2c      	ldr	r3, [pc, #176]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	4929      	ldr	r1, [pc, #164]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d008      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a60:	4b24      	ldr	r3, [pc, #144]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6c:	4921      	ldr	r1, [pc, #132]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d008      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a7e:	4b1d      	ldr	r3, [pc, #116]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a82:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8a:	491a      	ldr	r1, [pc, #104]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d008      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002a9c:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa8:	4912      	ldr	r1, [pc, #72]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d008      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002aba:	4b0e      	ldr	r3, [pc, #56]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	490b      	ldr	r1, [pc, #44]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002ad8:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002adc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae4:	4903      	ldr	r1, [pc, #12]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3748      	adds	r7, #72	; 0x48
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40021000 	.word	0x40021000

08002af8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e09d      	b.n	8002c46 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d108      	bne.n	8002b24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b1a:	d009      	beq.n	8002b30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	61da      	str	r2, [r3, #28]
 8002b22:	e005      	b.n	8002b30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d106      	bne.n	8002b50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7fd fdba 	bl	80006c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b66:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b70:	d902      	bls.n	8002b78 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b72:	2300      	movs	r3, #0
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	e002      	b.n	8002b7e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b7c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002b86:	d007      	beq.n	8002b98 <HAL_SPI_Init+0xa0>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b90:	d002      	beq.n	8002b98 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	69db      	ldr	r3, [r3, #28]
 8002bcc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bda:	ea42 0103 	orr.w	r1, r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	0c1b      	lsrs	r3, r3, #16
 8002bf4:	f003 0204 	and.w	r2, r3, #4
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	f003 0310 	and.w	r3, r3, #16
 8002c00:	431a      	orrs	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002c14:	ea42 0103 	orr.w	r1, r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	69da      	ldr	r2, [r3, #28]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b082      	sub	sp, #8
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e040      	b.n	8002ce2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d106      	bne.n	8002c76 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7fd fd69 	bl	8000748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2224      	movs	r2, #36	; 0x24
 8002c7a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0201 	bic.w	r2, r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 fbbf 	bl	8003410 <UART_SetConfig>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d101      	bne.n	8002c9c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e022      	b.n	8002ce2 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d002      	beq.n	8002caa <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 fd83 	bl	80037b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cb8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cc8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f042 0201 	orr.w	r2, r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 fe0a 	bl	80038f4 <UART_CheckIdleState>
 8002ce0:	4603      	mov	r3, r0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b08a      	sub	sp, #40	; 0x28
 8002cee:	af02      	add	r7, sp, #8
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	603b      	str	r3, [r7, #0]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cfe:	2b20      	cmp	r3, #32
 8002d00:	d178      	bne.n	8002df4 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <HAL_UART_Transmit+0x24>
 8002d08:	88fb      	ldrh	r3, [r7, #6]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e071      	b.n	8002df6 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2221      	movs	r2, #33	; 0x21
 8002d1e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d20:	f7fd febc 	bl	8000a9c <HAL_GetTick>
 8002d24:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	88fa      	ldrh	r2, [r7, #6]
 8002d2a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	88fa      	ldrh	r2, [r7, #6]
 8002d32:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d3e:	d108      	bne.n	8002d52 <HAL_UART_Transmit+0x68>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d104      	bne.n	8002d52 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	61bb      	str	r3, [r7, #24]
 8002d50:	e003      	b.n	8002d5a <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d5a:	e030      	b.n	8002dbe <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	2200      	movs	r2, #0
 8002d64:	2180      	movs	r1, #128	; 0x80
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 fe6c 	bl	8003a44 <UART_WaitOnFlagUntilTimeout>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d004      	beq.n	8002d7c <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2220      	movs	r2, #32
 8002d76:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e03c      	b.n	8002df6 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10b      	bne.n	8002d9a <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	881a      	ldrh	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d8e:	b292      	uxth	r2, r2
 8002d90:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	3302      	adds	r3, #2
 8002d96:	61bb      	str	r3, [r7, #24]
 8002d98:	e008      	b.n	8002dac <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	781a      	ldrb	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	b292      	uxth	r2, r2
 8002da4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	3301      	adds	r3, #1
 8002daa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1c8      	bne.n	8002d5c <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2140      	movs	r1, #64	; 0x40
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 fe35 	bl	8003a44 <UART_WaitOnFlagUntilTimeout>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d004      	beq.n	8002dea <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2220      	movs	r2, #32
 8002de4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e005      	b.n	8002df6 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2220      	movs	r2, #32
 8002dee:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	e000      	b.n	8002df6 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002df4:	2302      	movs	r3, #2
  }
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3720      	adds	r7, #32
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b0ba      	sub	sp, #232	; 0xe8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002e2a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002e2e:	4013      	ands	r3, r2
 8002e30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002e34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d115      	bne.n	8002e68 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e40:	f003 0320 	and.w	r3, r3, #32
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00f      	beq.n	8002e68 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e4c:	f003 0320 	and.w	r3, r3, #32
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d009      	beq.n	8002e68 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 82ac 	beq.w	80033b6 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	4798      	blx	r3
      }
      return;
 8002e66:	e2a6      	b.n	80033b6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002e68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 8117 	beq.w	80030a0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002e72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d106      	bne.n	8002e8c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002e7e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002e82:	4b85      	ldr	r3, [pc, #532]	; (8003098 <HAL_UART_IRQHandler+0x298>)
 8002e84:	4013      	ands	r3, r2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 810a 	beq.w	80030a0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d011      	beq.n	8002ebc <HAL_UART_IRQHandler+0xbc>
 8002e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00b      	beq.n	8002ebc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eb2:	f043 0201 	orr.w	r2, r3, #1
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d011      	beq.n	8002eec <HAL_UART_IRQHandler+0xec>
 8002ec8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00b      	beq.n	8002eec <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2202      	movs	r2, #2
 8002eda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ee2:	f043 0204 	orr.w	r2, r3, #4
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d011      	beq.n	8002f1c <HAL_UART_IRQHandler+0x11c>
 8002ef8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00b      	beq.n	8002f1c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2204      	movs	r2, #4
 8002f0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f12:	f043 0202 	orr.w	r2, r3, #2
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f20:	f003 0308 	and.w	r3, r3, #8
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d017      	beq.n	8002f58 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f2c:	f003 0320 	and.w	r3, r3, #32
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d105      	bne.n	8002f40 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002f34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f38:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00b      	beq.n	8002f58 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2208      	movs	r2, #8
 8002f46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f4e:	f043 0208 	orr.w	r2, r3, #8
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d012      	beq.n	8002f8a <HAL_UART_IRQHandler+0x18a>
 8002f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00c      	beq.n	8002f8a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f80:	f043 0220 	orr.w	r2, r3, #32
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 8212 	beq.w	80033ba <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f9a:	f003 0320 	and.w	r3, r3, #32
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00d      	beq.n	8002fbe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fa6:	f003 0320 	and.w	r3, r3, #32
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d007      	beq.n	8002fbe <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd2:	2b40      	cmp	r3, #64	; 0x40
 8002fd4:	d005      	beq.n	8002fe2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002fd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002fda:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d04f      	beq.n	8003082 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 fd95 	bl	8003b12 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff2:	2b40      	cmp	r3, #64	; 0x40
 8002ff4:	d141      	bne.n	800307a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	3308      	adds	r3, #8
 8002ffc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003000:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003004:	e853 3f00 	ldrex	r3, [r3]
 8003008:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800300c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003014:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	3308      	adds	r3, #8
 800301e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003022:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003026:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800302a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800302e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003032:	e841 2300 	strex	r3, r2, [r1]
 8003036:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800303a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1d9      	bne.n	8002ff6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003046:	2b00      	cmp	r3, #0
 8003048:	d013      	beq.n	8003072 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800304e:	4a13      	ldr	r2, [pc, #76]	; (800309c <HAL_UART_IRQHandler+0x29c>)
 8003050:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003056:	4618      	mov	r0, r3
 8003058:	f7fd fe98 	bl	8000d8c <HAL_DMA_Abort_IT>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d017      	beq.n	8003092 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800306c:	4610      	mov	r0, r2
 800306e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003070:	e00f      	b.n	8003092 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f9b6 	bl	80033e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003078:	e00b      	b.n	8003092 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f9b2 	bl	80033e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003080:	e007      	b.n	8003092 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f9ae 	bl	80033e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003090:	e193      	b.n	80033ba <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003092:	bf00      	nop
    return;
 8003094:	e191      	b.n	80033ba <HAL_UART_IRQHandler+0x5ba>
 8003096:	bf00      	nop
 8003098:	04000120 	.word	0x04000120
 800309c:	08003bdb 	.word	0x08003bdb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	f040 814b 	bne.w	8003340 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80030aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ae:	f003 0310 	and.w	r3, r3, #16
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 8144 	beq.w	8003340 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80030b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030bc:	f003 0310 	and.w	r3, r3, #16
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 813d 	beq.w	8003340 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2210      	movs	r2, #16
 80030cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d8:	2b40      	cmp	r3, #64	; 0x40
 80030da:	f040 80b5 	bne.w	8003248 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80030ea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 8165 	beq.w	80033be <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80030fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80030fe:	429a      	cmp	r2, r3
 8003100:	f080 815d 	bcs.w	80033be <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800310a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	2b20      	cmp	r3, #32
 8003116:	f000 8086 	beq.w	8003226 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003122:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003126:	e853 3f00 	ldrex	r3, [r3]
 800312a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800312e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003132:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003136:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	461a      	mov	r2, r3
 8003140:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003144:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003148:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800314c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003150:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003154:	e841 2300 	strex	r3, r2, [r1]
 8003158:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800315c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1da      	bne.n	800311a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	3308      	adds	r3, #8
 800316a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800316e:	e853 3f00 	ldrex	r3, [r3]
 8003172:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003174:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003176:	f023 0301 	bic.w	r3, r3, #1
 800317a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	3308      	adds	r3, #8
 8003184:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003188:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800318c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800318e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003190:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003194:	e841 2300 	strex	r3, r2, [r1]
 8003198:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800319a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1e1      	bne.n	8003164 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	3308      	adds	r3, #8
 80031a6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031aa:	e853 3f00 	ldrex	r3, [r3]
 80031ae:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80031b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	3308      	adds	r3, #8
 80031c0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80031c4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80031c6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80031ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80031cc:	e841 2300 	strex	r3, r2, [r1]
 80031d0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80031d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1e3      	bne.n	80031a0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2220      	movs	r2, #32
 80031dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031ee:	e853 3f00 	ldrex	r3, [r3]
 80031f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80031f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031f6:	f023 0310 	bic.w	r3, r3, #16
 80031fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	461a      	mov	r2, r3
 8003204:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003208:	65bb      	str	r3, [r7, #88]	; 0x58
 800320a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800320e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003210:	e841 2300 	strex	r3, r2, [r1]
 8003214:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1e4      	bne.n	80031e6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003220:	4618      	mov	r0, r3
 8003222:	f7fd fd7a 	bl	8000d1a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2202      	movs	r2, #2
 800322a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003238:	b29b      	uxth	r3, r3
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	b29b      	uxth	r3, r3
 800323e:	4619      	mov	r1, r3
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 f8d9 	bl	80033f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003246:	e0ba      	b.n	80033be <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003254:	b29b      	uxth	r3, r3
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003262:	b29b      	uxth	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 80ac 	beq.w	80033c2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 800326a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 80a7 	beq.w	80033c2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800327c:	e853 3f00 	ldrex	r3, [r3]
 8003280:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003284:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003288:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	461a      	mov	r2, r3
 8003292:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003296:	647b      	str	r3, [r7, #68]	; 0x44
 8003298:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800329c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800329e:	e841 2300 	strex	r3, r2, [r1]
 80032a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80032a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1e4      	bne.n	8003274 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	3308      	adds	r3, #8
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	e853 3f00 	ldrex	r3, [r3]
 80032b8:	623b      	str	r3, [r7, #32]
   return(result);
 80032ba:	6a3b      	ldr	r3, [r7, #32]
 80032bc:	f023 0301 	bic.w	r3, r3, #1
 80032c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	3308      	adds	r3, #8
 80032ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80032ce:	633a      	str	r2, [r7, #48]	; 0x30
 80032d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032d6:	e841 2300 	strex	r3, r2, [r1]
 80032da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80032dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1e3      	bne.n	80032aa <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2220      	movs	r2, #32
 80032e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	e853 3f00 	ldrex	r3, [r3]
 8003302:	60fb      	str	r3, [r7, #12]
   return(result);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f023 0310 	bic.w	r3, r3, #16
 800330a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	461a      	mov	r2, r3
 8003314:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003318:	61fb      	str	r3, [r7, #28]
 800331a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800331c:	69b9      	ldr	r1, [r7, #24]
 800331e:	69fa      	ldr	r2, [r7, #28]
 8003320:	e841 2300 	strex	r3, r2, [r1]
 8003324:	617b      	str	r3, [r7, #20]
   return(result);
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1e4      	bne.n	80032f6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003332:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003336:	4619      	mov	r1, r3
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f85d 	bl	80033f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800333e:	e040      	b.n	80033c2 <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003344:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00e      	beq.n	800336a <HAL_UART_IRQHandler+0x56a>
 800334c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003350:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d008      	beq.n	800336a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003360:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 fc79 	bl	8003c5a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003368:	e02e      	b.n	80033c8 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800336a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800336e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00e      	beq.n	8003394 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800337a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337e:	2b00      	cmp	r3, #0
 8003380:	d008      	beq.n	8003394 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003386:	2b00      	cmp	r3, #0
 8003388:	d01d      	beq.n	80033c6 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	4798      	blx	r3
    }
    return;
 8003392:	e018      	b.n	80033c6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800339c:	2b00      	cmp	r3, #0
 800339e:	d013      	beq.n	80033c8 <HAL_UART_IRQHandler+0x5c8>
 80033a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00d      	beq.n	80033c8 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 fc2a 	bl	8003c06 <UART_EndTransmit_IT>
    return;
 80033b2:	bf00      	nop
 80033b4:	e008      	b.n	80033c8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80033b6:	bf00      	nop
 80033b8:	e006      	b.n	80033c8 <HAL_UART_IRQHandler+0x5c8>
    return;
 80033ba:	bf00      	nop
 80033bc:	e004      	b.n	80033c8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80033be:	bf00      	nop
 80033c0:	e002      	b.n	80033c8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80033c2:	bf00      	nop
 80033c4:	e000      	b.n	80033c8 <HAL_UART_IRQHandler+0x5c8>
    return;
 80033c6:	bf00      	nop
  }

}
 80033c8:	37e8      	adds	r7, #232	; 0xe8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop

080033d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b088      	sub	sp, #32
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003418:	2300      	movs	r3, #0
 800341a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	431a      	orrs	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	431a      	orrs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	69db      	ldr	r3, [r3, #28]
 8003430:	4313      	orrs	r3, r2
 8003432:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800343e:	f023 030c 	bic.w	r3, r3, #12
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6812      	ldr	r2, [r2, #0]
 8003446:	6979      	ldr	r1, [r7, #20]
 8003448:	430b      	orrs	r3, r1
 800344a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	4313      	orrs	r3, r2
 8003470:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	430a      	orrs	r2, r1
 8003484:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4aac      	ldr	r2, [pc, #688]	; (800373c <UART_SetConfig+0x32c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d121      	bne.n	80034d4 <UART_SetConfig+0xc4>
 8003490:	4bab      	ldr	r3, [pc, #684]	; (8003740 <UART_SetConfig+0x330>)
 8003492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003494:	f003 0303 	and.w	r3, r3, #3
 8003498:	2b03      	cmp	r3, #3
 800349a:	d817      	bhi.n	80034cc <UART_SetConfig+0xbc>
 800349c:	a201      	add	r2, pc, #4	; (adr r2, 80034a4 <UART_SetConfig+0x94>)
 800349e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a2:	bf00      	nop
 80034a4:	080034b5 	.word	0x080034b5
 80034a8:	080034c1 	.word	0x080034c1
 80034ac:	080034c7 	.word	0x080034c7
 80034b0:	080034bb 	.word	0x080034bb
 80034b4:	2301      	movs	r3, #1
 80034b6:	77fb      	strb	r3, [r7, #31]
 80034b8:	e0b2      	b.n	8003620 <UART_SetConfig+0x210>
 80034ba:	2302      	movs	r3, #2
 80034bc:	77fb      	strb	r3, [r7, #31]
 80034be:	e0af      	b.n	8003620 <UART_SetConfig+0x210>
 80034c0:	2304      	movs	r3, #4
 80034c2:	77fb      	strb	r3, [r7, #31]
 80034c4:	e0ac      	b.n	8003620 <UART_SetConfig+0x210>
 80034c6:	2308      	movs	r3, #8
 80034c8:	77fb      	strb	r3, [r7, #31]
 80034ca:	e0a9      	b.n	8003620 <UART_SetConfig+0x210>
 80034cc:	2310      	movs	r3, #16
 80034ce:	77fb      	strb	r3, [r7, #31]
 80034d0:	bf00      	nop
 80034d2:	e0a5      	b.n	8003620 <UART_SetConfig+0x210>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a9a      	ldr	r2, [pc, #616]	; (8003744 <UART_SetConfig+0x334>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d123      	bne.n	8003526 <UART_SetConfig+0x116>
 80034de:	4b98      	ldr	r3, [pc, #608]	; (8003740 <UART_SetConfig+0x330>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ea:	d012      	beq.n	8003512 <UART_SetConfig+0x102>
 80034ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f0:	d802      	bhi.n	80034f8 <UART_SetConfig+0xe8>
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d007      	beq.n	8003506 <UART_SetConfig+0xf6>
 80034f6:	e012      	b.n	800351e <UART_SetConfig+0x10e>
 80034f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034fc:	d00c      	beq.n	8003518 <UART_SetConfig+0x108>
 80034fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003502:	d003      	beq.n	800350c <UART_SetConfig+0xfc>
 8003504:	e00b      	b.n	800351e <UART_SetConfig+0x10e>
 8003506:	2300      	movs	r3, #0
 8003508:	77fb      	strb	r3, [r7, #31]
 800350a:	e089      	b.n	8003620 <UART_SetConfig+0x210>
 800350c:	2302      	movs	r3, #2
 800350e:	77fb      	strb	r3, [r7, #31]
 8003510:	e086      	b.n	8003620 <UART_SetConfig+0x210>
 8003512:	2304      	movs	r3, #4
 8003514:	77fb      	strb	r3, [r7, #31]
 8003516:	e083      	b.n	8003620 <UART_SetConfig+0x210>
 8003518:	2308      	movs	r3, #8
 800351a:	77fb      	strb	r3, [r7, #31]
 800351c:	e080      	b.n	8003620 <UART_SetConfig+0x210>
 800351e:	2310      	movs	r3, #16
 8003520:	77fb      	strb	r3, [r7, #31]
 8003522:	bf00      	nop
 8003524:	e07c      	b.n	8003620 <UART_SetConfig+0x210>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a87      	ldr	r2, [pc, #540]	; (8003748 <UART_SetConfig+0x338>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d123      	bne.n	8003578 <UART_SetConfig+0x168>
 8003530:	4b83      	ldr	r3, [pc, #524]	; (8003740 <UART_SetConfig+0x330>)
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003538:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800353c:	d012      	beq.n	8003564 <UART_SetConfig+0x154>
 800353e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003542:	d802      	bhi.n	800354a <UART_SetConfig+0x13a>
 8003544:	2b00      	cmp	r3, #0
 8003546:	d007      	beq.n	8003558 <UART_SetConfig+0x148>
 8003548:	e012      	b.n	8003570 <UART_SetConfig+0x160>
 800354a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800354e:	d00c      	beq.n	800356a <UART_SetConfig+0x15a>
 8003550:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003554:	d003      	beq.n	800355e <UART_SetConfig+0x14e>
 8003556:	e00b      	b.n	8003570 <UART_SetConfig+0x160>
 8003558:	2300      	movs	r3, #0
 800355a:	77fb      	strb	r3, [r7, #31]
 800355c:	e060      	b.n	8003620 <UART_SetConfig+0x210>
 800355e:	2302      	movs	r3, #2
 8003560:	77fb      	strb	r3, [r7, #31]
 8003562:	e05d      	b.n	8003620 <UART_SetConfig+0x210>
 8003564:	2304      	movs	r3, #4
 8003566:	77fb      	strb	r3, [r7, #31]
 8003568:	e05a      	b.n	8003620 <UART_SetConfig+0x210>
 800356a:	2308      	movs	r3, #8
 800356c:	77fb      	strb	r3, [r7, #31]
 800356e:	e057      	b.n	8003620 <UART_SetConfig+0x210>
 8003570:	2310      	movs	r3, #16
 8003572:	77fb      	strb	r3, [r7, #31]
 8003574:	bf00      	nop
 8003576:	e053      	b.n	8003620 <UART_SetConfig+0x210>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a73      	ldr	r2, [pc, #460]	; (800374c <UART_SetConfig+0x33c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d123      	bne.n	80035ca <UART_SetConfig+0x1ba>
 8003582:	4b6f      	ldr	r3, [pc, #444]	; (8003740 <UART_SetConfig+0x330>)
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003586:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800358a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800358e:	d012      	beq.n	80035b6 <UART_SetConfig+0x1a6>
 8003590:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003594:	d802      	bhi.n	800359c <UART_SetConfig+0x18c>
 8003596:	2b00      	cmp	r3, #0
 8003598:	d007      	beq.n	80035aa <UART_SetConfig+0x19a>
 800359a:	e012      	b.n	80035c2 <UART_SetConfig+0x1b2>
 800359c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035a0:	d00c      	beq.n	80035bc <UART_SetConfig+0x1ac>
 80035a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035a6:	d003      	beq.n	80035b0 <UART_SetConfig+0x1a0>
 80035a8:	e00b      	b.n	80035c2 <UART_SetConfig+0x1b2>
 80035aa:	2300      	movs	r3, #0
 80035ac:	77fb      	strb	r3, [r7, #31]
 80035ae:	e037      	b.n	8003620 <UART_SetConfig+0x210>
 80035b0:	2302      	movs	r3, #2
 80035b2:	77fb      	strb	r3, [r7, #31]
 80035b4:	e034      	b.n	8003620 <UART_SetConfig+0x210>
 80035b6:	2304      	movs	r3, #4
 80035b8:	77fb      	strb	r3, [r7, #31]
 80035ba:	e031      	b.n	8003620 <UART_SetConfig+0x210>
 80035bc:	2308      	movs	r3, #8
 80035be:	77fb      	strb	r3, [r7, #31]
 80035c0:	e02e      	b.n	8003620 <UART_SetConfig+0x210>
 80035c2:	2310      	movs	r3, #16
 80035c4:	77fb      	strb	r3, [r7, #31]
 80035c6:	bf00      	nop
 80035c8:	e02a      	b.n	8003620 <UART_SetConfig+0x210>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a60      	ldr	r2, [pc, #384]	; (8003750 <UART_SetConfig+0x340>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d123      	bne.n	800361c <UART_SetConfig+0x20c>
 80035d4:	4b5a      	ldr	r3, [pc, #360]	; (8003740 <UART_SetConfig+0x330>)
 80035d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80035dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035e0:	d012      	beq.n	8003608 <UART_SetConfig+0x1f8>
 80035e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035e6:	d802      	bhi.n	80035ee <UART_SetConfig+0x1de>
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d007      	beq.n	80035fc <UART_SetConfig+0x1ec>
 80035ec:	e012      	b.n	8003614 <UART_SetConfig+0x204>
 80035ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035f2:	d00c      	beq.n	800360e <UART_SetConfig+0x1fe>
 80035f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035f8:	d003      	beq.n	8003602 <UART_SetConfig+0x1f2>
 80035fa:	e00b      	b.n	8003614 <UART_SetConfig+0x204>
 80035fc:	2300      	movs	r3, #0
 80035fe:	77fb      	strb	r3, [r7, #31]
 8003600:	e00e      	b.n	8003620 <UART_SetConfig+0x210>
 8003602:	2302      	movs	r3, #2
 8003604:	77fb      	strb	r3, [r7, #31]
 8003606:	e00b      	b.n	8003620 <UART_SetConfig+0x210>
 8003608:	2304      	movs	r3, #4
 800360a:	77fb      	strb	r3, [r7, #31]
 800360c:	e008      	b.n	8003620 <UART_SetConfig+0x210>
 800360e:	2308      	movs	r3, #8
 8003610:	77fb      	strb	r3, [r7, #31]
 8003612:	e005      	b.n	8003620 <UART_SetConfig+0x210>
 8003614:	2310      	movs	r3, #16
 8003616:	77fb      	strb	r3, [r7, #31]
 8003618:	bf00      	nop
 800361a:	e001      	b.n	8003620 <UART_SetConfig+0x210>
 800361c:	2310      	movs	r3, #16
 800361e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003628:	d15c      	bne.n	80036e4 <UART_SetConfig+0x2d4>
  {
    switch (clocksource)
 800362a:	7ffb      	ldrb	r3, [r7, #31]
 800362c:	2b08      	cmp	r3, #8
 800362e:	d828      	bhi.n	8003682 <UART_SetConfig+0x272>
 8003630:	a201      	add	r2, pc, #4	; (adr r2, 8003638 <UART_SetConfig+0x228>)
 8003632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003636:	bf00      	nop
 8003638:	0800365d 	.word	0x0800365d
 800363c:	08003665 	.word	0x08003665
 8003640:	0800366d 	.word	0x0800366d
 8003644:	08003683 	.word	0x08003683
 8003648:	08003673 	.word	0x08003673
 800364c:	08003683 	.word	0x08003683
 8003650:	08003683 	.word	0x08003683
 8003654:	08003683 	.word	0x08003683
 8003658:	0800367b 	.word	0x0800367b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800365c:	f7ff f858 	bl	8002710 <HAL_RCC_GetPCLK1Freq>
 8003660:	61b8      	str	r0, [r7, #24]
        break;
 8003662:	e013      	b.n	800368c <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003664:	f7ff f876 	bl	8002754 <HAL_RCC_GetPCLK2Freq>
 8003668:	61b8      	str	r0, [r7, #24]
        break;
 800366a:	e00f      	b.n	800368c <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800366c:	4b39      	ldr	r3, [pc, #228]	; (8003754 <UART_SetConfig+0x344>)
 800366e:	61bb      	str	r3, [r7, #24]
        break;
 8003670:	e00c      	b.n	800368c <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003672:	f7fe ffd7 	bl	8002624 <HAL_RCC_GetSysClockFreq>
 8003676:	61b8      	str	r0, [r7, #24]
        break;
 8003678:	e008      	b.n	800368c <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800367a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800367e:	61bb      	str	r3, [r7, #24]
        break;
 8003680:	e004      	b.n	800368c <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8003682:	2300      	movs	r3, #0
 8003684:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	77bb      	strb	r3, [r7, #30]
        break;
 800368a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 8083 	beq.w	800379a <UART_SetConfig+0x38a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	005a      	lsls	r2, r3, #1
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	085b      	lsrs	r3, r3, #1
 800369e:	441a      	add	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	2b0f      	cmp	r3, #15
 80036ae:	d916      	bls.n	80036de <UART_SetConfig+0x2ce>
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b6:	d212      	bcs.n	80036de <UART_SetConfig+0x2ce>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	f023 030f 	bic.w	r3, r3, #15
 80036c0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	085b      	lsrs	r3, r3, #1
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	89fb      	ldrh	r3, [r7, #14]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	89fa      	ldrh	r2, [r7, #14]
 80036da:	60da      	str	r2, [r3, #12]
 80036dc:	e05d      	b.n	800379a <UART_SetConfig+0x38a>
      }
      else
      {
        ret = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	77bb      	strb	r3, [r7, #30]
 80036e2:	e05a      	b.n	800379a <UART_SetConfig+0x38a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036e4:	7ffb      	ldrb	r3, [r7, #31]
 80036e6:	2b08      	cmp	r3, #8
 80036e8:	d836      	bhi.n	8003758 <UART_SetConfig+0x348>
 80036ea:	a201      	add	r2, pc, #4	; (adr r2, 80036f0 <UART_SetConfig+0x2e0>)
 80036ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f0:	08003715 	.word	0x08003715
 80036f4:	0800371d 	.word	0x0800371d
 80036f8:	08003725 	.word	0x08003725
 80036fc:	08003759 	.word	0x08003759
 8003700:	0800372b 	.word	0x0800372b
 8003704:	08003759 	.word	0x08003759
 8003708:	08003759 	.word	0x08003759
 800370c:	08003759 	.word	0x08003759
 8003710:	08003733 	.word	0x08003733
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003714:	f7fe fffc 	bl	8002710 <HAL_RCC_GetPCLK1Freq>
 8003718:	61b8      	str	r0, [r7, #24]
        break;
 800371a:	e022      	b.n	8003762 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800371c:	f7ff f81a 	bl	8002754 <HAL_RCC_GetPCLK2Freq>
 8003720:	61b8      	str	r0, [r7, #24]
        break;
 8003722:	e01e      	b.n	8003762 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003724:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <UART_SetConfig+0x344>)
 8003726:	61bb      	str	r3, [r7, #24]
        break;
 8003728:	e01b      	b.n	8003762 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800372a:	f7fe ff7b 	bl	8002624 <HAL_RCC_GetSysClockFreq>
 800372e:	61b8      	str	r0, [r7, #24]
        break;
 8003730:	e017      	b.n	8003762 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003736:	61bb      	str	r3, [r7, #24]
        break;
 8003738:	e013      	b.n	8003762 <UART_SetConfig+0x352>
 800373a:	bf00      	nop
 800373c:	40013800 	.word	0x40013800
 8003740:	40021000 	.word	0x40021000
 8003744:	40004400 	.word	0x40004400
 8003748:	40004800 	.word	0x40004800
 800374c:	40004c00 	.word	0x40004c00
 8003750:	40005000 	.word	0x40005000
 8003754:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	77bb      	strb	r3, [r7, #30]
        break;
 8003760:	bf00      	nop
    }

    if (pclk != 0U)
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d018      	beq.n	800379a <UART_SetConfig+0x38a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	085a      	lsrs	r2, r3, #1
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	441a      	add	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	fbb2 f3f3 	udiv	r3, r2, r3
 800377a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	2b0f      	cmp	r3, #15
 8003780:	d909      	bls.n	8003796 <UART_SetConfig+0x386>
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003788:	d205      	bcs.n	8003796 <UART_SetConfig+0x386>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	b29a      	uxth	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	60da      	str	r2, [r3, #12]
 8003794:	e001      	b.n	800379a <UART_SetConfig+0x38a>
      }
      else
      {
        ret = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80037a6:	7fbb      	ldrb	r3, [r7, #30]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3720      	adds	r7, #32
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00a      	beq.n	80037da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00a      	beq.n	80037fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00a      	beq.n	800381e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	f003 0310 	and.w	r3, r3, #16
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00a      	beq.n	8003862 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	f003 0320 	and.w	r3, r3, #32
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388c:	2b00      	cmp	r3, #0
 800388e:	d01a      	beq.n	80038c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ae:	d10a      	bne.n	80038c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	605a      	str	r2, [r3, #4]
  }
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b098      	sub	sp, #96	; 0x60
 80038f8:	af02      	add	r7, sp, #8
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003904:	f7fd f8ca 	bl	8000a9c <HAL_GetTick>
 8003908:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0308 	and.w	r3, r3, #8
 8003914:	2b08      	cmp	r3, #8
 8003916:	d12e      	bne.n	8003976 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003918:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003920:	2200      	movs	r2, #0
 8003922:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f88c 	bl	8003a44 <UART_WaitOnFlagUntilTimeout>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d021      	beq.n	8003976 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393a:	e853 3f00 	ldrex	r3, [r3]
 800393e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003942:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003946:	653b      	str	r3, [r7, #80]	; 0x50
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	461a      	mov	r2, r3
 800394e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003950:	647b      	str	r3, [r7, #68]	; 0x44
 8003952:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003954:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003956:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003958:	e841 2300 	strex	r3, r2, [r1]
 800395c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800395e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1e6      	bne.n	8003932 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2220      	movs	r2, #32
 8003968:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e062      	b.n	8003a3c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b04      	cmp	r3, #4
 8003982:	d149      	bne.n	8003a18 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003984:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800398c:	2200      	movs	r2, #0
 800398e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f856 	bl	8003a44 <UART_WaitOnFlagUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d03c      	beq.n	8003a18 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	e853 3f00 	ldrex	r3, [r3]
 80039aa:	623b      	str	r3, [r7, #32]
   return(result);
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	461a      	mov	r2, r3
 80039ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039bc:	633b      	str	r3, [r7, #48]	; 0x30
 80039be:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039c4:	e841 2300 	strex	r3, r2, [r1]
 80039c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1e6      	bne.n	800399e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	3308      	adds	r3, #8
 80039d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	e853 3f00 	ldrex	r3, [r3]
 80039de:	60fb      	str	r3, [r7, #12]
   return(result);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f023 0301 	bic.w	r3, r3, #1
 80039e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	3308      	adds	r3, #8
 80039ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039f0:	61fa      	str	r2, [r7, #28]
 80039f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f4:	69b9      	ldr	r1, [r7, #24]
 80039f6:	69fa      	ldr	r2, [r7, #28]
 80039f8:	e841 2300 	strex	r3, r2, [r1]
 80039fc:	617b      	str	r3, [r7, #20]
   return(result);
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1e5      	bne.n	80039d0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2220      	movs	r2, #32
 8003a08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e011      	b.n	8003a3c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3758      	adds	r7, #88	; 0x58
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	603b      	str	r3, [r7, #0]
 8003a50:	4613      	mov	r3, r2
 8003a52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a54:	e049      	b.n	8003aea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5c:	d045      	beq.n	8003aea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a5e:	f7fd f81d 	bl	8000a9c <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d302      	bcc.n	8003a74 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e048      	b.n	8003b0a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0304 	and.w	r3, r3, #4
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d031      	beq.n	8003aea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	69db      	ldr	r3, [r3, #28]
 8003a8c:	f003 0308 	and.w	r3, r3, #8
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d110      	bne.n	8003ab6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2208      	movs	r2, #8
 8003a9a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f000 f838 	bl	8003b12 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2208      	movs	r2, #8
 8003aa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e029      	b.n	8003b0a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ac0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ac4:	d111      	bne.n	8003aea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ace:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 f81e 	bl	8003b12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e00f      	b.n	8003b0a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69da      	ldr	r2, [r3, #28]
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	4013      	ands	r3, r2
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	bf0c      	ite	eq
 8003afa:	2301      	moveq	r3, #1
 8003afc:	2300      	movne	r3, #0
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	461a      	mov	r2, r3
 8003b02:	79fb      	ldrb	r3, [r7, #7]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d0a6      	beq.n	8003a56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b095      	sub	sp, #84	; 0x54
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b22:	e853 3f00 	ldrex	r3, [r3]
 8003b26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	461a      	mov	r2, r3
 8003b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b38:	643b      	str	r3, [r7, #64]	; 0x40
 8003b3a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b40:	e841 2300 	strex	r3, r2, [r1]
 8003b44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1e6      	bne.n	8003b1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	3308      	adds	r3, #8
 8003b52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	e853 3f00 	ldrex	r3, [r3]
 8003b5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	f023 0301 	bic.w	r3, r3, #1
 8003b62:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3308      	adds	r3, #8
 8003b6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b74:	e841 2300 	strex	r3, r2, [r1]
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1e5      	bne.n	8003b4c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d118      	bne.n	8003bba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	e853 3f00 	ldrex	r3, [r3]
 8003b94:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	f023 0310 	bic.w	r3, r3, #16
 8003b9c:	647b      	str	r3, [r7, #68]	; 0x44
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ba6:	61bb      	str	r3, [r7, #24]
 8003ba8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003baa:	6979      	ldr	r1, [r7, #20]
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	e841 2300 	strex	r3, r2, [r1]
 8003bb2:	613b      	str	r3, [r7, #16]
   return(result);
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1e6      	bne.n	8003b88 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003bce:	bf00      	nop
 8003bd0:	3754      	adds	r7, #84	; 0x54
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b084      	sub	sp, #16
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f7ff fbf3 	bl	80033e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bfe:	bf00      	nop
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b088      	sub	sp, #32
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	e853 3f00 	ldrex	r3, [r3]
 8003c1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c22:	61fb      	str	r3, [r7, #28]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	61bb      	str	r3, [r7, #24]
 8003c2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c30:	6979      	ldr	r1, [r7, #20]
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	e841 2300 	strex	r3, r2, [r1]
 8003c38:	613b      	str	r3, [r7, #16]
   return(result);
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1e6      	bne.n	8003c0e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2220      	movs	r2, #32
 8003c44:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7ff fbbf 	bl	80033d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c52:	bf00      	nop
 8003c54:	3720      	adds	r7, #32
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b085      	sub	sp, #20
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003c76:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003c7a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3714      	adds	r7, #20
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003ca4:	b084      	sub	sp, #16
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
 8003cae:	f107 0014 	add.w	r0, r7, #20
 8003cb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	b004      	add	sp, #16
 8003ce4:	4770      	bx	lr
	...

08003ce8 <__libc_init_array>:
 8003ce8:	b570      	push	{r4, r5, r6, lr}
 8003cea:	4e0d      	ldr	r6, [pc, #52]	; (8003d20 <__libc_init_array+0x38>)
 8003cec:	4c0d      	ldr	r4, [pc, #52]	; (8003d24 <__libc_init_array+0x3c>)
 8003cee:	1ba4      	subs	r4, r4, r6
 8003cf0:	10a4      	asrs	r4, r4, #2
 8003cf2:	2500      	movs	r5, #0
 8003cf4:	42a5      	cmp	r5, r4
 8003cf6:	d109      	bne.n	8003d0c <__libc_init_array+0x24>
 8003cf8:	4e0b      	ldr	r6, [pc, #44]	; (8003d28 <__libc_init_array+0x40>)
 8003cfa:	4c0c      	ldr	r4, [pc, #48]	; (8003d2c <__libc_init_array+0x44>)
 8003cfc:	f000 f820 	bl	8003d40 <_init>
 8003d00:	1ba4      	subs	r4, r4, r6
 8003d02:	10a4      	asrs	r4, r4, #2
 8003d04:	2500      	movs	r5, #0
 8003d06:	42a5      	cmp	r5, r4
 8003d08:	d105      	bne.n	8003d16 <__libc_init_array+0x2e>
 8003d0a:	bd70      	pop	{r4, r5, r6, pc}
 8003d0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d10:	4798      	blx	r3
 8003d12:	3501      	adds	r5, #1
 8003d14:	e7ee      	b.n	8003cf4 <__libc_init_array+0xc>
 8003d16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d1a:	4798      	blx	r3
 8003d1c:	3501      	adds	r5, #1
 8003d1e:	e7f2      	b.n	8003d06 <__libc_init_array+0x1e>
 8003d20:	08003d90 	.word	0x08003d90
 8003d24:	08003d90 	.word	0x08003d90
 8003d28:	08003d90 	.word	0x08003d90
 8003d2c:	08003d94 	.word	0x08003d94

08003d30 <memset>:
 8003d30:	4402      	add	r2, r0
 8003d32:	4603      	mov	r3, r0
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d100      	bne.n	8003d3a <memset+0xa>
 8003d38:	4770      	bx	lr
 8003d3a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d3e:	e7f9      	b.n	8003d34 <memset+0x4>

08003d40 <_init>:
 8003d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d42:	bf00      	nop
 8003d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d46:	bc08      	pop	{r3}
 8003d48:	469e      	mov	lr, r3
 8003d4a:	4770      	bx	lr

08003d4c <_fini>:
 8003d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d4e:	bf00      	nop
 8003d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d52:	bc08      	pop	{r3}
 8003d54:	469e      	mov	lr, r3
 8003d56:	4770      	bx	lr
